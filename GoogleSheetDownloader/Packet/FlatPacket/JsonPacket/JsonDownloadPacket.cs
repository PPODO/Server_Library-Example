// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatPacket.JsonPacket
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct JsonDownloadPacket : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static JsonDownloadPacket GetRootAsJsonDownloadPacket(ByteBuffer _bb) { return GetRootAsJsonDownloadPacket(_bb, new JsonDownloadPacket()); }
  public static JsonDownloadPacket GetRootAsJsonDownloadPacket(ByteBuffer _bb, JsonDownloadPacket obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyJsonDownloadPacket(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, JsonDownloadPacketVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public JsonDownloadPacket __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte CompressedJsonData(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int CompressedJsonDataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCompressedJsonDataBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetCompressedJsonDataBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetCompressedJsonDataArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<FlatPacket.JsonPacket.JsonDownloadPacket> CreateJsonDownloadPacket(FlatBufferBuilder builder,
      VectorOffset compressed_json_dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    JsonDownloadPacket.AddCompressedJsonData(builder, compressed_json_dataOffset);
    return JsonDownloadPacket.EndJsonDownloadPacket(builder);
  }

  public static void StartJsonDownloadPacket(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddCompressedJsonData(FlatBufferBuilder builder, VectorOffset compressedJsonDataOffset) { builder.AddOffset(0, compressedJsonDataOffset.Value, 0); }
  public static VectorOffset CreateCompressedJsonDataVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCompressedJsonDataVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCompressedJsonDataVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCompressedJsonDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCompressedJsonDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<FlatPacket.JsonPacket.JsonDownloadPacket> EndJsonDownloadPacket(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatPacket.JsonPacket.JsonDownloadPacket>(o);
  }
  public static void FinishJsonDownloadPacketBuffer(FlatBufferBuilder builder, Offset<FlatPacket.JsonPacket.JsonDownloadPacket> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedJsonDownloadPacketBuffer(FlatBufferBuilder builder, Offset<FlatPacket.JsonPacket.JsonDownloadPacket> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class JsonDownloadPacketVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*CompressedJsonData*/, 1 /*byte*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
