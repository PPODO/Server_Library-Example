// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Mail
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DumpFileTransmit : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static DumpFileTransmit GetRootAsDumpFileTransmit(ByteBuffer _bb) { return GetRootAsDumpFileTransmit(_bb, new DumpFileTransmit()); }
  public static DumpFileTransmit GetRootAsDumpFileTransmit(ByteBuffer _bb, DumpFileTransmit obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyDumpFileTransmit(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, DumpFileTransmitVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DumpFileTransmit __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short RequestType { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public string ProgramName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProgramNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetProgramNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetProgramNameArray() { return __p.__vector_as_array<byte>(6); }
  public string DumpFileName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDumpFileNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDumpFileNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDumpFileNameArray() { return __p.__vector_as_array<byte>(8); }
  public byte Data(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int DataLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDataArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<Mail.DumpFileTransmit> CreateDumpFileTransmit(FlatBufferBuilder builder,
      short request_type = 0,
      StringOffset program_nameOffset = default(StringOffset),
      StringOffset dump_file_nameOffset = default(StringOffset),
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(4);
    DumpFileTransmit.AddData(builder, dataOffset);
    DumpFileTransmit.AddDumpFileName(builder, dump_file_nameOffset);
    DumpFileTransmit.AddProgramName(builder, program_nameOffset);
    DumpFileTransmit.AddRequestType(builder, request_type);
    return DumpFileTransmit.EndDumpFileTransmit(builder);
  }

  public static void StartDumpFileTransmit(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddRequestType(FlatBufferBuilder builder, short requestType) { builder.AddShort(0, requestType, 0); }
  public static void AddProgramName(FlatBufferBuilder builder, StringOffset programNameOffset) { builder.AddOffset(1, programNameOffset.Value, 0); }
  public static void AddDumpFileName(FlatBufferBuilder builder, StringOffset dumpFileNameOffset) { builder.AddOffset(2, dumpFileNameOffset.Value, 0); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(3, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<Mail.DumpFileTransmit> EndDumpFileTransmit(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Mail.DumpFileTransmit>(o);
  }
  public static void FinishDumpFileTransmitBuffer(FlatBufferBuilder builder, Offset<Mail.DumpFileTransmit> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedDumpFileTransmitBuffer(FlatBufferBuilder builder, Offset<Mail.DumpFileTransmit> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class DumpFileTransmitVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*RequestType*/, 2 /*short*/, 2, false)
      && verifier.VerifyString(tablePos, 6 /*ProgramName*/, false)
      && verifier.VerifyString(tablePos, 8 /*DumpFileName*/, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*Data*/, 1 /*byte*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
