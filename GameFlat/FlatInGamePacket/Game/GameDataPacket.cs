// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatInGamePacket.Game
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GameDataPacket : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static GameDataPacket GetRootAsGameDataPacket(ByteBuffer _bb) { return GetRootAsGameDataPacket(_bb, new GameDataPacket()); }
  public static GameDataPacket GetRootAsGameDataPacket(ByteBuffer _bb, GameDataPacket obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyGameDataPacket(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, GameDataPacketVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GameDataPacket __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FlatInGamePacket.Game.GameData? UserGameData(int j) { int o = __p.__offset(4); return o != 0 ? (FlatInGamePacket.Game.GameData?)(new FlatInGamePacket.Game.GameData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int UserGameDataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatInGamePacket.Game.GameDataPacket> CreateGameDataPacket(FlatBufferBuilder builder,
      VectorOffset user_game_dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    GameDataPacket.AddUserGameData(builder, user_game_dataOffset);
    return GameDataPacket.EndGameDataPacket(builder);
  }

  public static void StartGameDataPacket(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddUserGameData(FlatBufferBuilder builder, VectorOffset userGameDataOffset) { builder.AddOffset(0, userGameDataOffset.Value, 0); }
  public static VectorOffset CreateUserGameDataVector(FlatBufferBuilder builder, Offset<FlatInGamePacket.Game.GameData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateUserGameDataVectorBlock(FlatBufferBuilder builder, Offset<FlatInGamePacket.Game.GameData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUserGameDataVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FlatInGamePacket.Game.GameData>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUserGameDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FlatInGamePacket.Game.GameData>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartUserGameDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatInGamePacket.Game.GameDataPacket> EndGameDataPacket(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatInGamePacket.Game.GameDataPacket>(o);
  }
  public static void FinishGameDataPacketBuffer(FlatBufferBuilder builder, Offset<FlatInGamePacket.Game.GameDataPacket> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedGameDataPacketBuffer(FlatBufferBuilder builder, Offset<FlatInGamePacket.Game.GameDataPacket> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class GameDataPacketVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*UserGameData*/, FlatInGamePacket.Game.GameDataVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
