// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatInGamePacket.Game
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct VehicleInformation : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static VehicleInformation GetRootAsVehicleInformation(ByteBuffer _bb) { return GetRootAsVehicleInformation(_bb, new VehicleInformation()); }
  public static VehicleInformation GetRootAsVehicleInformation(ByteBuffer _bb, VehicleInformation obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyVehicleInformation(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, VehicleInformationVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public VehicleInformation __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FlatInGamePacket.Game.vector? Location { get { int o = __p.__offset(4); return o != 0 ? (FlatInGamePacket.Game.vector?)(new FlatInGamePacket.Game.vector()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public FlatInGamePacket.Game.vector? Rotation { get { int o = __p.__offset(6); return o != 0 ? (FlatInGamePacket.Game.vector?)(new FlatInGamePacket.Game.vector()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public FlatInGamePacket.Game.vector? Velocity { get { int o = __p.__offset(8); return o != 0 ? (FlatInGamePacket.Game.vector?)(new FlatInGamePacket.Game.vector()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float Horizontal { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<FlatInGamePacket.Game.VehicleInformation> CreateVehicleInformation(FlatBufferBuilder builder,
      Offset<FlatInGamePacket.Game.vector> locationOffset = default(Offset<FlatInGamePacket.Game.vector>),
      Offset<FlatInGamePacket.Game.vector> rotationOffset = default(Offset<FlatInGamePacket.Game.vector>),
      Offset<FlatInGamePacket.Game.vector> velocityOffset = default(Offset<FlatInGamePacket.Game.vector>),
      float horizontal = 0.0f) {
    builder.StartTable(4);
    VehicleInformation.AddHorizontal(builder, horizontal);
    VehicleInformation.AddVelocity(builder, velocityOffset);
    VehicleInformation.AddRotation(builder, rotationOffset);
    VehicleInformation.AddLocation(builder, locationOffset);
    return VehicleInformation.EndVehicleInformation(builder);
  }

  public static void StartVehicleInformation(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddLocation(FlatBufferBuilder builder, Offset<FlatInGamePacket.Game.vector> locationOffset) { builder.AddOffset(0, locationOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<FlatInGamePacket.Game.vector> rotationOffset) { builder.AddOffset(1, rotationOffset.Value, 0); }
  public static void AddVelocity(FlatBufferBuilder builder, Offset<FlatInGamePacket.Game.vector> velocityOffset) { builder.AddOffset(2, velocityOffset.Value, 0); }
  public static void AddHorizontal(FlatBufferBuilder builder, float horizontal) { builder.AddFloat(3, horizontal, 0.0f); }
  public static Offset<FlatInGamePacket.Game.VehicleInformation> EndVehicleInformation(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatInGamePacket.Game.VehicleInformation>(o);
  }
  public static void FinishVehicleInformationBuffer(FlatBufferBuilder builder, Offset<FlatInGamePacket.Game.VehicleInformation> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedVehicleInformationBuffer(FlatBufferBuilder builder, Offset<FlatInGamePacket.Game.VehicleInformation> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class VehicleInformationVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyTable(tablePos, 4 /*Location*/, FlatInGamePacket.Game.vectorVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 6 /*Rotation*/, FlatInGamePacket.Game.vectorVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 8 /*Velocity*/, FlatInGamePacket.Game.vectorVerify.Verify, false)
      && verifier.VerifyField(tablePos, 10 /*Horizontal*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
