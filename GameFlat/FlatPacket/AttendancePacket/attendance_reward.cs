// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatPacket.AttendancePacket
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct attendance_reward : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static attendance_reward GetRootAsattendance_reward(ByteBuffer _bb) { return GetRootAsattendance_reward(_bb, new attendance_reward()); }
  public static attendance_reward GetRootAsattendance_reward(ByteBuffer _bb, attendance_reward obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Verifyattendance_reward(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, attendance_rewardVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public attendance_reward __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int AttendanceCount { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatPacket.item? RewardItemList(int j) { int o = __p.__offset(6); return o != 0 ? (FlatPacket.item?)(new FlatPacket.item()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RewardItemListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatPacket.AttendancePacket.attendance_reward> Createattendance_reward(FlatBufferBuilder builder,
      int attendance_count = 0,
      VectorOffset reward_item_listOffset = default(VectorOffset)) {
    builder.StartTable(2);
    attendance_reward.AddRewardItemList(builder, reward_item_listOffset);
    attendance_reward.AddAttendanceCount(builder, attendance_count);
    return attendance_reward.Endattendance_reward(builder);
  }

  public static void Startattendance_reward(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddAttendanceCount(FlatBufferBuilder builder, int attendanceCount) { builder.AddInt(0, attendanceCount, 0); }
  public static void AddRewardItemList(FlatBufferBuilder builder, VectorOffset rewardItemListOffset) { builder.AddOffset(1, rewardItemListOffset.Value, 0); }
  public static VectorOffset CreateRewardItemListVector(FlatBufferBuilder builder, Offset<FlatPacket.item>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRewardItemListVectorBlock(FlatBufferBuilder builder, Offset<FlatPacket.item>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardItemListVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FlatPacket.item>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardItemListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FlatPacket.item>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardItemListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatPacket.AttendancePacket.attendance_reward> Endattendance_reward(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatPacket.AttendancePacket.attendance_reward>(o);
  }
  public static void Finishattendance_rewardBuffer(FlatBufferBuilder builder, Offset<FlatPacket.AttendancePacket.attendance_reward> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedattendance_rewardBuffer(FlatBufferBuilder builder, Offset<FlatPacket.AttendancePacket.attendance_reward> offset) { builder.FinishSizePrefixed(offset.Value); }

  public static VectorOffset CreateSortedVectorOfattendance_reward(FlatBufferBuilder builder, Offset<attendance_reward>[] offsets) {
    Array.Sort(offsets,
      (Offset<attendance_reward> o1, Offset<attendance_reward> o2) =>
        new attendance_reward().__assign(builder.DataBuffer.Length - o1.Value, builder.DataBuffer).AttendanceCount.CompareTo(new attendance_reward().__assign(builder.DataBuffer.Length - o2.Value, builder.DataBuffer).AttendanceCount));
    return builder.CreateVectorOfTables(offsets);
  }

  public static attendance_reward? __lookup_by_key(int vectorLocation, int key, ByteBuffer bb) {
    attendance_reward obj_ = new attendance_reward();
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      obj_.__assign(tableOffset, bb);
      int comp = obj_.AttendanceCount.CompareTo(key);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return obj_;
      }
    }
    return null;
  }
}


static public class attendance_rewardVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*AttendanceCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*RewardItemList*/, FlatPacket.itemVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
