// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatPacket.AttendancePacket
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AttendanceDetail : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AttendanceDetail GetRootAsAttendanceDetail(ByteBuffer _bb) { return GetRootAsAttendanceDetail(_bb, new AttendanceDetail()); }
  public static AttendanceDetail GetRootAsAttendanceDetail(ByteBuffer _bb, AttendanceDetail obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AttendanceDetail __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short EventType { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public short EventId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public string EventName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetEventNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetEventNameArray() { return __p.__vector_as_array<byte>(8); }
  public short CurrentAttendanceCount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public short MaxAttendanceDay { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public FlatPacket.AttendancePacket.attendance_reward? AttendanceRewards(int j) { int o = __p.__offset(14); return o != 0 ? (FlatPacket.AttendancePacket.attendance_reward?)(new FlatPacket.AttendancePacket.attendance_reward()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AttendanceRewardsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public FlatPacket.AttendancePacket.attendance_reward? AttendanceRewardsByKey(int key) { int o = __p.__offset(14); return o != 0 ? FlatPacket.AttendancePacket.attendance_reward.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }

  public static Offset<FlatPacket.AttendancePacket.AttendanceDetail> CreateAttendanceDetail(FlatBufferBuilder builder,
      short event_type = 0,
      short event_id = 0,
      StringOffset event_nameOffset = default(StringOffset),
      short current_attendance_count = 0,
      short max_attendance_day = 0,
      VectorOffset attendance_rewardsOffset = default(VectorOffset)) {
    builder.StartTable(6);
    AttendanceDetail.AddAttendanceRewards(builder, attendance_rewardsOffset);
    AttendanceDetail.AddEventName(builder, event_nameOffset);
    AttendanceDetail.AddMaxAttendanceDay(builder, max_attendance_day);
    AttendanceDetail.AddCurrentAttendanceCount(builder, current_attendance_count);
    AttendanceDetail.AddEventId(builder, event_id);
    AttendanceDetail.AddEventType(builder, event_type);
    return AttendanceDetail.EndAttendanceDetail(builder);
  }

  public static void StartAttendanceDetail(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddEventType(FlatBufferBuilder builder, short eventType) { builder.AddShort(0, eventType, 0); }
  public static void AddEventId(FlatBufferBuilder builder, short eventId) { builder.AddShort(1, eventId, 0); }
  public static void AddEventName(FlatBufferBuilder builder, StringOffset eventNameOffset) { builder.AddOffset(2, eventNameOffset.Value, 0); }
  public static void AddCurrentAttendanceCount(FlatBufferBuilder builder, short currentAttendanceCount) { builder.AddShort(3, currentAttendanceCount, 0); }
  public static void AddMaxAttendanceDay(FlatBufferBuilder builder, short maxAttendanceDay) { builder.AddShort(4, maxAttendanceDay, 0); }
  public static void AddAttendanceRewards(FlatBufferBuilder builder, VectorOffset attendanceRewardsOffset) { builder.AddOffset(5, attendanceRewardsOffset.Value, 0); }
  public static VectorOffset CreateAttendanceRewardsVector(FlatBufferBuilder builder, Offset<FlatPacket.AttendancePacket.attendance_reward>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAttendanceRewardsVectorBlock(FlatBufferBuilder builder, Offset<FlatPacket.AttendancePacket.attendance_reward>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAttendanceRewardsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FlatPacket.AttendancePacket.attendance_reward>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAttendanceRewardsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FlatPacket.AttendancePacket.attendance_reward>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAttendanceRewardsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatPacket.AttendancePacket.AttendanceDetail> EndAttendanceDetail(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatPacket.AttendancePacket.AttendanceDetail>(o);
  }
}


static public class AttendanceDetailVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventType*/, 2 /*short*/, 2, false)
      && verifier.VerifyField(tablePos, 6 /*EventId*/, 2 /*short*/, 2, false)
      && verifier.VerifyString(tablePos, 8 /*EventName*/, false)
      && verifier.VerifyField(tablePos, 10 /*CurrentAttendanceCount*/, 2 /*short*/, 2, false)
      && verifier.VerifyField(tablePos, 12 /*MaxAttendanceDay*/, 2 /*short*/, 2, false)
      && verifier.VerifyVectorOfTables(tablePos, 14 /*AttendanceRewards*/, FlatPacket.AttendancePacket.attendance_rewardVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
