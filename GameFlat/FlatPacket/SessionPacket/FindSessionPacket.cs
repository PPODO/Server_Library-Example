// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatPacket.SessionPacket
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FindSessionPacket : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static FindSessionPacket GetRootAsFindSessionPacket(ByteBuffer _bb) { return GetRootAsFindSessionPacket(_bb, new FindSessionPacket()); }
  public static FindSessionPacket GetRootAsFindSessionPacket(ByteBuffer _bb, FindSessionPacket obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyFindSessionPacket(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, FindSessionPacketVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FindSessionPacket __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Page { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public FlatPacket.SessionPacket.session_information? Sessions(int j) { int o = __p.__offset(6); return o != 0 ? (FlatPacket.SessionPacket.session_information?)(new FlatPacket.SessionPacket.session_information()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SessionsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public FlatPacket.SessionPacket.session_information? SessionsByKey(int key) { int o = __p.__offset(6); return o != 0 ? FlatPacket.SessionPacket.session_information.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }

  public static Offset<FlatPacket.SessionPacket.FindSessionPacket> CreateFindSessionPacket(FlatBufferBuilder builder,
      int page = 0,
      VectorOffset sessionsOffset = default(VectorOffset)) {
    builder.StartTable(2);
    FindSessionPacket.AddSessions(builder, sessionsOffset);
    FindSessionPacket.AddPage(builder, page);
    return FindSessionPacket.EndFindSessionPacket(builder);
  }

  public static void StartFindSessionPacket(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPage(FlatBufferBuilder builder, int page) { builder.AddInt(0, page, 0); }
  public static void AddSessions(FlatBufferBuilder builder, VectorOffset sessionsOffset) { builder.AddOffset(1, sessionsOffset.Value, 0); }
  public static VectorOffset CreateSessionsVector(FlatBufferBuilder builder, Offset<FlatPacket.SessionPacket.session_information>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSessionsVectorBlock(FlatBufferBuilder builder, Offset<FlatPacket.SessionPacket.session_information>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSessionsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FlatPacket.SessionPacket.session_information>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSessionsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FlatPacket.SessionPacket.session_information>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSessionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatPacket.SessionPacket.FindSessionPacket> EndFindSessionPacket(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatPacket.SessionPacket.FindSessionPacket>(o);
  }
  public static void FinishFindSessionPacketBuffer(FlatBufferBuilder builder, Offset<FlatPacket.SessionPacket.FindSessionPacket> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedFindSessionPacketBuffer(FlatBufferBuilder builder, Offset<FlatPacket.SessionPacket.FindSessionPacket> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class FindSessionPacketVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Page*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*Sessions*/, FlatPacket.SessionPacket.session_informationVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
