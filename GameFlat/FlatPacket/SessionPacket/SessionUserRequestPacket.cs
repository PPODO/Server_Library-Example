// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatPacket.SessionPacket
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SessionUserRequestPacket : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SessionUserRequestPacket GetRootAsSessionUserRequestPacket(ByteBuffer _bb) { return GetRootAsSessionUserRequestPacket(_bb, new SessionUserRequestPacket()); }
  public static SessionUserRequestPacket GetRootAsSessionUserRequestPacket(ByteBuffer _bb, SessionUserRequestPacket obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifySessionUserRequestPacket(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, SessionUserRequestPacketVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SessionUserRequestPacket __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int SessionId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Uuid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public short Request { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public string Message { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMessageBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetMessageBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetMessageArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<FlatPacket.SessionPacket.SessionUserRequestPacket> CreateSessionUserRequestPacket(FlatBufferBuilder builder,
      int session_id = 0,
      int uuid = 0,
      short request = 0,
      StringOffset messageOffset = default(StringOffset)) {
    builder.StartTable(4);
    SessionUserRequestPacket.AddMessage(builder, messageOffset);
    SessionUserRequestPacket.AddUuid(builder, uuid);
    SessionUserRequestPacket.AddSessionId(builder, session_id);
    SessionUserRequestPacket.AddRequest(builder, request);
    return SessionUserRequestPacket.EndSessionUserRequestPacket(builder);
  }

  public static void StartSessionUserRequestPacket(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddSessionId(FlatBufferBuilder builder, int sessionId) { builder.AddInt(0, sessionId, 0); }
  public static void AddUuid(FlatBufferBuilder builder, int uuid) { builder.AddInt(1, uuid, 0); }
  public static void AddRequest(FlatBufferBuilder builder, short request) { builder.AddShort(2, request, 0); }
  public static void AddMessage(FlatBufferBuilder builder, StringOffset messageOffset) { builder.AddOffset(3, messageOffset.Value, 0); }
  public static Offset<FlatPacket.SessionPacket.SessionUserRequestPacket> EndSessionUserRequestPacket(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatPacket.SessionPacket.SessionUserRequestPacket>(o);
  }
  public static void FinishSessionUserRequestPacketBuffer(FlatBufferBuilder builder, Offset<FlatPacket.SessionPacket.SessionUserRequestPacket> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedSessionUserRequestPacketBuffer(FlatBufferBuilder builder, Offset<FlatPacket.SessionPacket.SessionUserRequestPacket> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class SessionUserRequestPacketVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*SessionId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Uuid*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Request*/, 2 /*short*/, 2, false)
      && verifier.VerifyString(tablePos, 10 /*Message*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
