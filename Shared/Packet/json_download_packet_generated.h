// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_JSONDOWNLOADPACKET_FLATPACKET_JSONPACKET_H_
#define FLATBUFFERS_GENERATED_JSONDOWNLOADPACKET_FLATPACKET_JSONPACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace FlatPacket {
namespace JsonPacket {

struct JsonDownloadPacket;
struct JsonDownloadPacketBuilder;

struct JsonDownloadPacket FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef JsonDownloadPacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_COMPRESSED_JSON_DATA = 4
  };
  const ::flatbuffers::Vector<uint8_t> *compressed_json_data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_COMPRESSED_JSON_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_COMPRESSED_JSON_DATA) &&
           verifier.VerifyVector(compressed_json_data()) &&
           verifier.EndTable();
  }
};

struct JsonDownloadPacketBuilder {
  typedef JsonDownloadPacket Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_compressed_json_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> compressed_json_data) {
    fbb_.AddOffset(JsonDownloadPacket::VT_COMPRESSED_JSON_DATA, compressed_json_data);
  }
  explicit JsonDownloadPacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<JsonDownloadPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<JsonDownloadPacket>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<JsonDownloadPacket> CreateJsonDownloadPacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> compressed_json_data = 0) {
  JsonDownloadPacketBuilder builder_(_fbb);
  builder_.add_compressed_json_data(compressed_json_data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<JsonDownloadPacket> CreateJsonDownloadPacketDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *compressed_json_data = nullptr) {
  auto compressed_json_data__ = compressed_json_data ? _fbb.CreateVector<uint8_t>(*compressed_json_data) : 0;
  return FlatPacket::JsonPacket::CreateJsonDownloadPacket(
      _fbb,
      compressed_json_data__);
}

inline const FlatPacket::JsonPacket::JsonDownloadPacket *GetJsonDownloadPacket(const void *buf) {
  return ::flatbuffers::GetRoot<FlatPacket::JsonPacket::JsonDownloadPacket>(buf);
}

inline const FlatPacket::JsonPacket::JsonDownloadPacket *GetSizePrefixedJsonDownloadPacket(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlatPacket::JsonPacket::JsonDownloadPacket>(buf);
}

inline bool VerifyJsonDownloadPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatPacket::JsonPacket::JsonDownloadPacket>(nullptr);
}

inline bool VerifySizePrefixedJsonDownloadPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatPacket::JsonPacket::JsonDownloadPacket>(nullptr);
}

inline void FinishJsonDownloadPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::JsonPacket::JsonDownloadPacket> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedJsonDownloadPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::JsonPacket::JsonDownloadPacket> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace JsonPacket
}  // namespace FlatPacket

#endif  // FLATBUFFERS_GENERATED_JSONDOWNLOADPACKET_FLATPACKET_JSONPACKET_H_
