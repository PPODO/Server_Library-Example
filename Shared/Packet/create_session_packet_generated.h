// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CREATESESSIONPACKET_FLATPACKET_SESSIONPACKET_H_
#define FLATBUFFERS_GENERATED_CREATESESSIONPACKET_FLATPACKET_SESSIONPACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "session_data_define_generated.h"

namespace FlatPacket {
namespace SessionPacket {

struct CreateSession;
struct CreateSessionBuilder;

struct CreateSession FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CreateSessionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REQUESTED_USER_UUID = 4,
    VT_SESSION_NAME = 6,
    VT_MAX_USERS_COUNT = 8
  };
  int32_t requested_user_uuid() const {
    return GetField<int32_t>(VT_REQUESTED_USER_UUID, 0);
  }
  const ::flatbuffers::String *session_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SESSION_NAME);
  }
  int32_t max_users_count() const {
    return GetField<int32_t>(VT_MAX_USERS_COUNT, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_REQUESTED_USER_UUID, 4) &&
           VerifyOffset(verifier, VT_SESSION_NAME) &&
           verifier.VerifyString(session_name()) &&
           VerifyField<int32_t>(verifier, VT_MAX_USERS_COUNT, 4) &&
           verifier.EndTable();
  }
};

struct CreateSessionBuilder {
  typedef CreateSession Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_requested_user_uuid(int32_t requested_user_uuid) {
    fbb_.AddElement<int32_t>(CreateSession::VT_REQUESTED_USER_UUID, requested_user_uuid, 0);
  }
  void add_session_name(::flatbuffers::Offset<::flatbuffers::String> session_name) {
    fbb_.AddOffset(CreateSession::VT_SESSION_NAME, session_name);
  }
  void add_max_users_count(int32_t max_users_count) {
    fbb_.AddElement<int32_t>(CreateSession::VT_MAX_USERS_COUNT, max_users_count, 0);
  }
  explicit CreateSessionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CreateSession> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CreateSession>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CreateSession> CreateCreateSession(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t requested_user_uuid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> session_name = 0,
    int32_t max_users_count = 0) {
  CreateSessionBuilder builder_(_fbb);
  builder_.add_max_users_count(max_users_count);
  builder_.add_session_name(session_name);
  builder_.add_requested_user_uuid(requested_user_uuid);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CreateSession> CreateCreateSessionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t requested_user_uuid = 0,
    const char *session_name = nullptr,
    int32_t max_users_count = 0) {
  auto session_name__ = session_name ? _fbb.CreateString(session_name) : 0;
  return FlatPacket::SessionPacket::CreateCreateSession(
      _fbb,
      requested_user_uuid,
      session_name__,
      max_users_count);
}

inline const FlatPacket::SessionPacket::CreateSession *GetCreateSession(const void *buf) {
  return ::flatbuffers::GetRoot<FlatPacket::SessionPacket::CreateSession>(buf);
}

inline const FlatPacket::SessionPacket::CreateSession *GetSizePrefixedCreateSession(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlatPacket::SessionPacket::CreateSession>(buf);
}

inline bool VerifyCreateSessionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatPacket::SessionPacket::CreateSession>(nullptr);
}

inline bool VerifySizePrefixedCreateSessionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatPacket::SessionPacket::CreateSession>(nullptr);
}

inline void FinishCreateSessionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::SessionPacket::CreateSession> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCreateSessionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::SessionPacket::CreateSession> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace SessionPacket
}  // namespace FlatPacket

#endif  // FLATBUFFERS_GENERATED_CREATESESSIONPACKET_FLATPACKET_SESSIONPACKET_H_
