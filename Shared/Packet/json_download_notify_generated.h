// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_JSONDOWNLOADNOTIFY_FLATPACKET_JSONPACKET_H_
#define FLATBUFFERS_GENERATED_JSONDOWNLOADNOTIFY_FLATPACKET_JSONPACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace FlatPacket {
namespace JsonPacket {

struct JsonDownloadNotifyPacket;
struct JsonDownloadNotifyPacketBuilder;

struct JsonDownloadNotifyPacket FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef JsonDownloadNotifyPacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ORIGINAL_JSON_LENGTH = 4,
    VT_COMPRESSED_JSON_LENGTH = 6
  };
  int64_t original_json_length() const {
    return GetField<int64_t>(VT_ORIGINAL_JSON_LENGTH, 0);
  }
  int64_t compressed_json_length() const {
    return GetField<int64_t>(VT_COMPRESSED_JSON_LENGTH, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_ORIGINAL_JSON_LENGTH, 8) &&
           VerifyField<int64_t>(verifier, VT_COMPRESSED_JSON_LENGTH, 8) &&
           verifier.EndTable();
  }
};

struct JsonDownloadNotifyPacketBuilder {
  typedef JsonDownloadNotifyPacket Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_original_json_length(int64_t original_json_length) {
    fbb_.AddElement<int64_t>(JsonDownloadNotifyPacket::VT_ORIGINAL_JSON_LENGTH, original_json_length, 0);
  }
  void add_compressed_json_length(int64_t compressed_json_length) {
    fbb_.AddElement<int64_t>(JsonDownloadNotifyPacket::VT_COMPRESSED_JSON_LENGTH, compressed_json_length, 0);
  }
  explicit JsonDownloadNotifyPacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<JsonDownloadNotifyPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<JsonDownloadNotifyPacket>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<JsonDownloadNotifyPacket> CreateJsonDownloadNotifyPacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t original_json_length = 0,
    int64_t compressed_json_length = 0) {
  JsonDownloadNotifyPacketBuilder builder_(_fbb);
  builder_.add_compressed_json_length(compressed_json_length);
  builder_.add_original_json_length(original_json_length);
  return builder_.Finish();
}

inline const FlatPacket::JsonPacket::JsonDownloadNotifyPacket *GetJsonDownloadNotifyPacket(const void *buf) {
  return ::flatbuffers::GetRoot<FlatPacket::JsonPacket::JsonDownloadNotifyPacket>(buf);
}

inline const FlatPacket::JsonPacket::JsonDownloadNotifyPacket *GetSizePrefixedJsonDownloadNotifyPacket(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlatPacket::JsonPacket::JsonDownloadNotifyPacket>(buf);
}

inline bool VerifyJsonDownloadNotifyPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatPacket::JsonPacket::JsonDownloadNotifyPacket>(nullptr);
}

inline bool VerifySizePrefixedJsonDownloadNotifyPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatPacket::JsonPacket::JsonDownloadNotifyPacket>(nullptr);
}

inline void FinishJsonDownloadNotifyPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::JsonPacket::JsonDownloadNotifyPacket> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedJsonDownloadNotifyPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::JsonPacket::JsonDownloadNotifyPacket> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace JsonPacket
}  // namespace FlatPacket

#endif  // FLATBUFFERS_GENERATED_JSONDOWNLOADNOTIFY_FLATPACKET_JSONPACKET_H_
