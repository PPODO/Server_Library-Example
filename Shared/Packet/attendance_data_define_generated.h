// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ATTENDANCEDATADEFINE_FLATPACKET_ATTENDANCEPACKET_H_
#define FLATBUFFERS_GENERATED_ATTENDANCEDATADEFINE_FLATPACKET_ATTENDANCEPACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "data_define_generated.h"

namespace FlatPacket {
namespace AttendancePacket {

struct attendance_reward;
struct attendance_rewardBuilder;

struct attendance_reward FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef attendance_rewardBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ATTENDANCE_COUNT = 4,
    VT_REWARD_ITEM_LIST = 6
  };
  int32_t attendance_count() const {
    return GetField<int32_t>(VT_ATTENDANCE_COUNT, 0);
  }
  bool KeyCompareLessThan(const attendance_reward * const o) const {
    return attendance_count() < o->attendance_count();
  }
  int KeyCompareWithValue(int32_t _attendance_count) const {
    return static_cast<int>(attendance_count() > _attendance_count) - static_cast<int>(attendance_count() < _attendance_count);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::item>> *reward_item_list() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::item>> *>(VT_REWARD_ITEM_LIST);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ATTENDANCE_COUNT, 4) &&
           VerifyOffset(verifier, VT_REWARD_ITEM_LIST) &&
           verifier.VerifyVector(reward_item_list()) &&
           verifier.VerifyVectorOfTables(reward_item_list()) &&
           verifier.EndTable();
  }
};

struct attendance_rewardBuilder {
  typedef attendance_reward Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_attendance_count(int32_t attendance_count) {
    fbb_.AddElement<int32_t>(attendance_reward::VT_ATTENDANCE_COUNT, attendance_count, 0);
  }
  void add_reward_item_list(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::item>>> reward_item_list) {
    fbb_.AddOffset(attendance_reward::VT_REWARD_ITEM_LIST, reward_item_list);
  }
  explicit attendance_rewardBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<attendance_reward> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<attendance_reward>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<attendance_reward> Createattendance_reward(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t attendance_count = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::item>>> reward_item_list = 0) {
  attendance_rewardBuilder builder_(_fbb);
  builder_.add_reward_item_list(reward_item_list);
  builder_.add_attendance_count(attendance_count);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<attendance_reward> Createattendance_rewardDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t attendance_count = 0,
    const std::vector<::flatbuffers::Offset<FlatPacket::item>> *reward_item_list = nullptr) {
  auto reward_item_list__ = reward_item_list ? _fbb.CreateVector<::flatbuffers::Offset<FlatPacket::item>>(*reward_item_list) : 0;
  return FlatPacket::AttendancePacket::Createattendance_reward(
      _fbb,
      attendance_count,
      reward_item_list__);
}

inline const FlatPacket::AttendancePacket::attendance_reward *Getattendance_reward(const void *buf) {
  return ::flatbuffers::GetRoot<FlatPacket::AttendancePacket::attendance_reward>(buf);
}

inline const FlatPacket::AttendancePacket::attendance_reward *GetSizePrefixedattendance_reward(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlatPacket::AttendancePacket::attendance_reward>(buf);
}

inline bool Verifyattendance_rewardBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatPacket::AttendancePacket::attendance_reward>(nullptr);
}

inline bool VerifySizePrefixedattendance_rewardBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatPacket::AttendancePacket::attendance_reward>(nullptr);
}

inline void Finishattendance_rewardBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::AttendancePacket::attendance_reward> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedattendance_rewardBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::AttendancePacket::attendance_reward> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace AttendancePacket
}  // namespace FlatPacket

#endif  // FLATBUFFERS_GENERATED_ATTENDANCEDATADEFINE_FLATPACKET_ATTENDANCEPACKET_H_
