// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_JOINSESSIONPACKET_FLATPACKET_SESSIONPACKET_H_
#define FLATBUFFERS_GENERATED_JOINSESSIONPACKET_FLATPACKET_SESSIONPACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "session_info_generated.h"

namespace FlatPacket {
namespace SessionPacket {

struct JoinSessionPacket;
struct JoinSessionPacketBuilder;

struct JoinSessionPacket FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef JoinSessionPacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SESSION_ID = 4,
    VT_UUID = 6,
    VT_SESSION_INFO = 8
  };
  int32_t session_id() const {
    return GetField<int32_t>(VT_SESSION_ID, 0);
  }
  int32_t uuid() const {
    return GetField<int32_t>(VT_UUID, 0);
  }
  const FlatPacket::SessionPacket::session_information *session_info() const {
    return GetPointer<const FlatPacket::SessionPacket::session_information *>(VT_SESSION_INFO);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_SESSION_ID, 4) &&
           VerifyField<int32_t>(verifier, VT_UUID, 4) &&
           VerifyOffset(verifier, VT_SESSION_INFO) &&
           verifier.VerifyTable(session_info()) &&
           verifier.EndTable();
  }
};

struct JoinSessionPacketBuilder {
  typedef JoinSessionPacket Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_session_id(int32_t session_id) {
    fbb_.AddElement<int32_t>(JoinSessionPacket::VT_SESSION_ID, session_id, 0);
  }
  void add_uuid(int32_t uuid) {
    fbb_.AddElement<int32_t>(JoinSessionPacket::VT_UUID, uuid, 0);
  }
  void add_session_info(::flatbuffers::Offset<FlatPacket::SessionPacket::session_information> session_info) {
    fbb_.AddOffset(JoinSessionPacket::VT_SESSION_INFO, session_info);
  }
  explicit JoinSessionPacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<JoinSessionPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<JoinSessionPacket>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<JoinSessionPacket> CreateJoinSessionPacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t session_id = 0,
    int32_t uuid = 0,
    ::flatbuffers::Offset<FlatPacket::SessionPacket::session_information> session_info = 0) {
  JoinSessionPacketBuilder builder_(_fbb);
  builder_.add_session_info(session_info);
  builder_.add_uuid(uuid);
  builder_.add_session_id(session_id);
  return builder_.Finish();
}

inline const FlatPacket::SessionPacket::JoinSessionPacket *GetJoinSessionPacket(const void *buf) {
  return ::flatbuffers::GetRoot<FlatPacket::SessionPacket::JoinSessionPacket>(buf);
}

inline const FlatPacket::SessionPacket::JoinSessionPacket *GetSizePrefixedJoinSessionPacket(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlatPacket::SessionPacket::JoinSessionPacket>(buf);
}

inline bool VerifyJoinSessionPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatPacket::SessionPacket::JoinSessionPacket>(nullptr);
}

inline bool VerifySizePrefixedJoinSessionPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatPacket::SessionPacket::JoinSessionPacket>(nullptr);
}

inline void FinishJoinSessionPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::SessionPacket::JoinSessionPacket> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedJoinSessionPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::SessionPacket::JoinSessionPacket> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace SessionPacket
}  // namespace FlatPacket

#endif  // FLATBUFFERS_GENERATED_JOINSESSIONPACKET_FLATPACKET_SESSIONPACKET_H_
