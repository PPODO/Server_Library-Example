// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_USERREADYPACKET_FLATINGAMEPACKET_USER_H_
#define FLATBUFFERS_GENERATED_USERREADYPACKET_FLATINGAMEPACKET_USER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace FlatInGamePacket {
namespace User {

struct UserReadyPacket;
struct UserReadyPacketBuilder;

struct UserReadyPacket FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UserReadyPacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_START_POSITION = 6
  };
  int32_t uuid() const {
    return GetField<int32_t>(VT_UUID, 0);
  }
  int16_t start_position() const {
    return GetField<int16_t>(VT_START_POSITION, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_UUID, 4) &&
           VerifyField<int16_t>(verifier, VT_START_POSITION, 2) &&
           verifier.EndTable();
  }
};

struct UserReadyPacketBuilder {
  typedef UserReadyPacket Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_uuid(int32_t uuid) {
    fbb_.AddElement<int32_t>(UserReadyPacket::VT_UUID, uuid, 0);
  }
  void add_start_position(int16_t start_position) {
    fbb_.AddElement<int16_t>(UserReadyPacket::VT_START_POSITION, start_position, 0);
  }
  explicit UserReadyPacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UserReadyPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UserReadyPacket>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<UserReadyPacket> CreateUserReadyPacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t uuid = 0,
    int16_t start_position = 0) {
  UserReadyPacketBuilder builder_(_fbb);
  builder_.add_uuid(uuid);
  builder_.add_start_position(start_position);
  return builder_.Finish();
}

inline const FlatInGamePacket::User::UserReadyPacket *GetUserReadyPacket(const void *buf) {
  return ::flatbuffers::GetRoot<FlatInGamePacket::User::UserReadyPacket>(buf);
}

inline const FlatInGamePacket::User::UserReadyPacket *GetSizePrefixedUserReadyPacket(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlatInGamePacket::User::UserReadyPacket>(buf);
}

inline bool VerifyUserReadyPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatInGamePacket::User::UserReadyPacket>(nullptr);
}

inline bool VerifySizePrefixedUserReadyPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatInGamePacket::User::UserReadyPacket>(nullptr);
}

inline void FinishUserReadyPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatInGamePacket::User::UserReadyPacket> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedUserReadyPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatInGamePacket::User::UserReadyPacket> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace User
}  // namespace FlatInGamePacket

#endif  // FLATBUFFERS_GENERATED_USERREADYPACKET_FLATINGAMEPACKET_USER_H_
