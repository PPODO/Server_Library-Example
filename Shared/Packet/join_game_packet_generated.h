// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_JOINGAMEPACKET_FLATINGAMEPACKET_GAME_H_
#define FLATBUFFERS_GENERATED_JOINGAMEPACKET_FLATINGAMEPACKET_GAME_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace FlatInGamePacket {
namespace Game {

struct UserSpawnInfo;
struct UserSpawnInfoBuilder;

struct JoinGamePacket;
struct JoinGamePacketBuilder;

struct UserSpawnInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UserSpawnInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_USER_NAME = 6,
    VT_SPAWN_INDEX = 8
  };
  int32_t uuid() const {
    return GetField<int32_t>(VT_UUID, 0);
  }
  const ::flatbuffers::String *user_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER_NAME);
  }
  int16_t spawn_index() const {
    return GetField<int16_t>(VT_SPAWN_INDEX, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_UUID, 4) &&
           VerifyOffset(verifier, VT_USER_NAME) &&
           verifier.VerifyString(user_name()) &&
           VerifyField<int16_t>(verifier, VT_SPAWN_INDEX, 2) &&
           verifier.EndTable();
  }
};

struct UserSpawnInfoBuilder {
  typedef UserSpawnInfo Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_uuid(int32_t uuid) {
    fbb_.AddElement<int32_t>(UserSpawnInfo::VT_UUID, uuid, 0);
  }
  void add_user_name(::flatbuffers::Offset<::flatbuffers::String> user_name) {
    fbb_.AddOffset(UserSpawnInfo::VT_USER_NAME, user_name);
  }
  void add_spawn_index(int16_t spawn_index) {
    fbb_.AddElement<int16_t>(UserSpawnInfo::VT_SPAWN_INDEX, spawn_index, 0);
  }
  explicit UserSpawnInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UserSpawnInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UserSpawnInfo>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<UserSpawnInfo> CreateUserSpawnInfo(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t uuid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> user_name = 0,
    int16_t spawn_index = 0) {
  UserSpawnInfoBuilder builder_(_fbb);
  builder_.add_user_name(user_name);
  builder_.add_uuid(uuid);
  builder_.add_spawn_index(spawn_index);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<UserSpawnInfo> CreateUserSpawnInfoDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t uuid = 0,
    const char *user_name = nullptr,
    int16_t spawn_index = 0) {
  auto user_name__ = user_name ? _fbb.CreateString(user_name) : 0;
  return FlatInGamePacket::Game::CreateUserSpawnInfo(
      _fbb,
      uuid,
      user_name__,
      spawn_index);
}

struct JoinGamePacket FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef JoinGamePacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_JOINED_USERS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<FlatInGamePacket::Game::UserSpawnInfo>> *joined_users() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<FlatInGamePacket::Game::UserSpawnInfo>> *>(VT_JOINED_USERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_JOINED_USERS) &&
           verifier.VerifyVector(joined_users()) &&
           verifier.VerifyVectorOfTables(joined_users()) &&
           verifier.EndTable();
  }
};

struct JoinGamePacketBuilder {
  typedef JoinGamePacket Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_joined_users(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FlatInGamePacket::Game::UserSpawnInfo>>> joined_users) {
    fbb_.AddOffset(JoinGamePacket::VT_JOINED_USERS, joined_users);
  }
  explicit JoinGamePacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<JoinGamePacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<JoinGamePacket>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<JoinGamePacket> CreateJoinGamePacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FlatInGamePacket::Game::UserSpawnInfo>>> joined_users = 0) {
  JoinGamePacketBuilder builder_(_fbb);
  builder_.add_joined_users(joined_users);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<JoinGamePacket> CreateJoinGamePacketDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<FlatInGamePacket::Game::UserSpawnInfo>> *joined_users = nullptr) {
  auto joined_users__ = joined_users ? _fbb.CreateVector<::flatbuffers::Offset<FlatInGamePacket::Game::UserSpawnInfo>>(*joined_users) : 0;
  return FlatInGamePacket::Game::CreateJoinGamePacket(
      _fbb,
      joined_users__);
}

inline const FlatInGamePacket::Game::JoinGamePacket *GetJoinGamePacket(const void *buf) {
  return ::flatbuffers::GetRoot<FlatInGamePacket::Game::JoinGamePacket>(buf);
}

inline const FlatInGamePacket::Game::JoinGamePacket *GetSizePrefixedJoinGamePacket(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlatInGamePacket::Game::JoinGamePacket>(buf);
}

inline bool VerifyJoinGamePacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatInGamePacket::Game::JoinGamePacket>(nullptr);
}

inline bool VerifySizePrefixedJoinGamePacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatInGamePacket::Game::JoinGamePacket>(nullptr);
}

inline void FinishJoinGamePacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatInGamePacket::Game::JoinGamePacket> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedJoinGamePacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatInGamePacket::Game::JoinGamePacket> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Game
}  // namespace FlatInGamePacket

#endif  // FLATBUFFERS_GENERATED_JOINGAMEPACKET_FLATINGAMEPACKET_GAME_H_
