// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RECEIVEMAIL_FLATPACKET_MAILPACKET_H_
#define FLATBUFFERS_GENERATED_RECEIVEMAIL_FLATPACKET_MAILPACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "data_define_generated.h"

namespace FlatPacket {
namespace MailPacket {

struct MailReceive;
struct MailReceiveBuilder;

struct MailReceive FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MailReceiveBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_PAGE = 6,
    VT_MAIL_ID = 8,
    VT_RECEIVE_ALL = 10,
    VT_RECEIVED_REWARDS = 12
  };
  int32_t uuid() const {
    return GetField<int32_t>(VT_UUID, 0);
  }
  int16_t page() const {
    return GetField<int16_t>(VT_PAGE, 0);
  }
  int64_t mail_id() const {
    return GetField<int64_t>(VT_MAIL_ID, 0);
  }
  bool receive_all() const {
    return GetField<uint8_t>(VT_RECEIVE_ALL, 0) != 0;
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::item>> *received_rewards() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::item>> *>(VT_RECEIVED_REWARDS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_UUID, 4) &&
           VerifyField<int16_t>(verifier, VT_PAGE, 2) &&
           VerifyField<int64_t>(verifier, VT_MAIL_ID, 8) &&
           VerifyField<uint8_t>(verifier, VT_RECEIVE_ALL, 1) &&
           VerifyOffset(verifier, VT_RECEIVED_REWARDS) &&
           verifier.VerifyVector(received_rewards()) &&
           verifier.VerifyVectorOfTables(received_rewards()) &&
           verifier.EndTable();
  }
};

struct MailReceiveBuilder {
  typedef MailReceive Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_uuid(int32_t uuid) {
    fbb_.AddElement<int32_t>(MailReceive::VT_UUID, uuid, 0);
  }
  void add_page(int16_t page) {
    fbb_.AddElement<int16_t>(MailReceive::VT_PAGE, page, 0);
  }
  void add_mail_id(int64_t mail_id) {
    fbb_.AddElement<int64_t>(MailReceive::VT_MAIL_ID, mail_id, 0);
  }
  void add_receive_all(bool receive_all) {
    fbb_.AddElement<uint8_t>(MailReceive::VT_RECEIVE_ALL, static_cast<uint8_t>(receive_all), 0);
  }
  void add_received_rewards(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::item>>> received_rewards) {
    fbb_.AddOffset(MailReceive::VT_RECEIVED_REWARDS, received_rewards);
  }
  explicit MailReceiveBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MailReceive> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MailReceive>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MailReceive> CreateMailReceive(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t uuid = 0,
    int16_t page = 0,
    int64_t mail_id = 0,
    bool receive_all = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::item>>> received_rewards = 0) {
  MailReceiveBuilder builder_(_fbb);
  builder_.add_mail_id(mail_id);
  builder_.add_received_rewards(received_rewards);
  builder_.add_uuid(uuid);
  builder_.add_page(page);
  builder_.add_receive_all(receive_all);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MailReceive> CreateMailReceiveDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t uuid = 0,
    int16_t page = 0,
    int64_t mail_id = 0,
    bool receive_all = false,
    const std::vector<::flatbuffers::Offset<FlatPacket::item>> *received_rewards = nullptr) {
  auto received_rewards__ = received_rewards ? _fbb.CreateVector<::flatbuffers::Offset<FlatPacket::item>>(*received_rewards) : 0;
  return FlatPacket::MailPacket::CreateMailReceive(
      _fbb,
      uuid,
      page,
      mail_id,
      receive_all,
      received_rewards__);
}

inline const FlatPacket::MailPacket::MailReceive *GetMailReceive(const void *buf) {
  return ::flatbuffers::GetRoot<FlatPacket::MailPacket::MailReceive>(buf);
}

inline const FlatPacket::MailPacket::MailReceive *GetSizePrefixedMailReceive(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlatPacket::MailPacket::MailReceive>(buf);
}

inline bool VerifyMailReceiveBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatPacket::MailPacket::MailReceive>(nullptr);
}

inline bool VerifySizePrefixedMailReceiveBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatPacket::MailPacket::MailReceive>(nullptr);
}

inline void FinishMailReceiveBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::MailPacket::MailReceive> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMailReceiveBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::MailPacket::MailReceive> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace MailPacket
}  // namespace FlatPacket

#endif  // FLATBUFFERS_GENERATED_RECEIVEMAIL_FLATPACKET_MAILPACKET_H_
