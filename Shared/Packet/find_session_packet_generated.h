// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FINDSESSIONPACKET_FLATPACKET_SESSIONPACKET_H_
#define FLATBUFFERS_GENERATED_FINDSESSIONPACKET_FLATPACKET_SESSIONPACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "session_data_define_generated.h"
#include "session_info_generated.h"

namespace FlatPacket {
namespace SessionPacket {

struct FindSessionPacket;
struct FindSessionPacketBuilder;

struct FindSessionPacket FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FindSessionPacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PAGE = 4,
    VT_MAX_PAGE = 6,
    VT_SESSIONS = 8
  };
  int32_t page() const {
    return GetField<int32_t>(VT_PAGE, 0);
  }
  int32_t max_page() const {
    return GetField<int32_t>(VT_MAX_PAGE, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::SessionPacket::session_information>> *sessions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::SessionPacket::session_information>> *>(VT_SESSIONS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PAGE, 4) &&
           VerifyField<int32_t>(verifier, VT_MAX_PAGE, 4) &&
           VerifyOffset(verifier, VT_SESSIONS) &&
           verifier.VerifyVector(sessions()) &&
           verifier.VerifyVectorOfTables(sessions()) &&
           verifier.EndTable();
  }
};

struct FindSessionPacketBuilder {
  typedef FindSessionPacket Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_page(int32_t page) {
    fbb_.AddElement<int32_t>(FindSessionPacket::VT_PAGE, page, 0);
  }
  void add_max_page(int32_t max_page) {
    fbb_.AddElement<int32_t>(FindSessionPacket::VT_MAX_PAGE, max_page, 0);
  }
  void add_sessions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::SessionPacket::session_information>>> sessions) {
    fbb_.AddOffset(FindSessionPacket::VT_SESSIONS, sessions);
  }
  explicit FindSessionPacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FindSessionPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FindSessionPacket>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FindSessionPacket> CreateFindSessionPacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t page = 0,
    int32_t max_page = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::SessionPacket::session_information>>> sessions = 0) {
  FindSessionPacketBuilder builder_(_fbb);
  builder_.add_sessions(sessions);
  builder_.add_max_page(max_page);
  builder_.add_page(page);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FindSessionPacket> CreateFindSessionPacketDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t page = 0,
    int32_t max_page = 0,
    std::vector<::flatbuffers::Offset<FlatPacket::SessionPacket::session_information>> *sessions = nullptr) {
  auto sessions__ = sessions ? _fbb.CreateVectorOfSortedTables<FlatPacket::SessionPacket::session_information>(sessions) : 0;
  return FlatPacket::SessionPacket::CreateFindSessionPacket(
      _fbb,
      page,
      max_page,
      sessions__);
}

inline const FlatPacket::SessionPacket::FindSessionPacket *GetFindSessionPacket(const void *buf) {
  return ::flatbuffers::GetRoot<FlatPacket::SessionPacket::FindSessionPacket>(buf);
}

inline const FlatPacket::SessionPacket::FindSessionPacket *GetSizePrefixedFindSessionPacket(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlatPacket::SessionPacket::FindSessionPacket>(buf);
}

inline bool VerifyFindSessionPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatPacket::SessionPacket::FindSessionPacket>(nullptr);
}

inline bool VerifySizePrefixedFindSessionPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatPacket::SessionPacket::FindSessionPacket>(nullptr);
}

inline void FinishFindSessionPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::SessionPacket::FindSessionPacket> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFindSessionPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::SessionPacket::FindSessionPacket> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace SessionPacket
}  // namespace FlatPacket

#endif  // FLATBUFFERS_GENERATED_FINDSESSIONPACKET_FLATPACKET_SESSIONPACKET_H_
