// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INGAMEDATADEFINE_FLATINGAMEPACKET_H_
#define FLATBUFFERS_GENERATED_INGAMEDATADEFINE_FLATINGAMEPACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace FlatInGamePacket {

enum PacketType : int8_t {
  PacketType_None = 0,
  PacketType_Join = 1,
  PacketType_Ready = 2,
  PacketType_Start = 3,
  PacketType_GameData = 4,
  PacketType_HeartBeat = 5,
  PacketType_MIN = PacketType_None,
  PacketType_MAX = PacketType_HeartBeat
};

inline const PacketType (&EnumValuesPacketType())[6] {
  static const PacketType values[] = {
    PacketType_None,
    PacketType_Join,
    PacketType_Ready,
    PacketType_Start,
    PacketType_GameData,
    PacketType_HeartBeat
  };
  return values;
}

inline const char * const *EnumNamesPacketType() {
  static const char * const names[7] = {
    "None",
    "Join",
    "Ready",
    "Start",
    "GameData",
    "HeartBeat",
    nullptr
  };
  return names;
}

inline const char *EnumNamePacketType(PacketType e) {
  if (::flatbuffers::IsOutRange(e, PacketType_None, PacketType_HeartBeat)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPacketType()[index];
}

}  // namespace FlatInGamePacket

#endif  // FLATBUFFERS_GENERATED_INGAMEDATADEFINE_FLATINGAMEPACKET_H_
