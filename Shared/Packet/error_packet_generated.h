// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ERRORPACKET_FLATPACKET_ERROR_H_
#define FLATBUFFERS_GENERATED_ERRORPACKET_FLATPACKET_ERROR_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace FlatPacket {
namespace Error {

struct ErrorMessagePacket;
struct ErrorMessagePacketBuilder;

struct ErrorMessagePacket FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ErrorMessagePacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE = 4,
    VT_CRITICAL_ERROR = 6
  };
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool critical_error() const {
    return GetField<uint8_t>(VT_CRITICAL_ERROR, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           VerifyField<uint8_t>(verifier, VT_CRITICAL_ERROR, 1) &&
           verifier.EndTable();
  }
};

struct ErrorMessagePacketBuilder {
  typedef ErrorMessagePacket Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(ErrorMessagePacket::VT_MESSAGE, message);
  }
  void add_critical_error(bool critical_error) {
    fbb_.AddElement<uint8_t>(ErrorMessagePacket::VT_CRITICAL_ERROR, static_cast<uint8_t>(critical_error), 0);
  }
  explicit ErrorMessagePacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ErrorMessagePacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ErrorMessagePacket>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ErrorMessagePacket> CreateErrorMessagePacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0,
    bool critical_error = false) {
  ErrorMessagePacketBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_critical_error(critical_error);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ErrorMessagePacket> CreateErrorMessagePacketDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *message = nullptr,
    bool critical_error = false) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return FlatPacket::Error::CreateErrorMessagePacket(
      _fbb,
      message__,
      critical_error);
}

inline const FlatPacket::Error::ErrorMessagePacket *GetErrorMessagePacket(const void *buf) {
  return ::flatbuffers::GetRoot<FlatPacket::Error::ErrorMessagePacket>(buf);
}

inline const FlatPacket::Error::ErrorMessagePacket *GetSizePrefixedErrorMessagePacket(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlatPacket::Error::ErrorMessagePacket>(buf);
}

inline bool VerifyErrorMessagePacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatPacket::Error::ErrorMessagePacket>(nullptr);
}

inline bool VerifySizePrefixedErrorMessagePacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatPacket::Error::ErrorMessagePacket>(nullptr);
}

inline void FinishErrorMessagePacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::Error::ErrorMessagePacket> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedErrorMessagePacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::Error::ErrorMessagePacket> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Error
}  // namespace FlatPacket

#endif  // FLATBUFFERS_GENERATED_ERRORPACKET_FLATPACKET_ERROR_H_
