// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAILINFOPACKET_FLATPACKET_MAILPACKET_H_
#define FLATBUFFERS_GENERATED_MAILINFOPACKET_FLATPACKET_MAILPACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "data_define_generated.h"

namespace FlatPacket {
namespace MailPacket {

struct mail;
struct mailBuilder;

struct ReceivedMailInformationPacket;
struct ReceivedMailInformationPacketBuilder;

struct mail FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef mailBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAIL_ID = 4,
    VT_MAIL_NAME = 6,
    VT_RECEIVED_DATE = 8,
    VT_EXPIRATION_PERIOD = 10,
    VT_ATTACHED_ITEMS = 12,
    VT_IS_CHECKED = 14
  };
  int64_t mail_id() const {
    return GetField<int64_t>(VT_MAIL_ID, 0);
  }
  const ::flatbuffers::String *mail_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MAIL_NAME);
  }
  const ::flatbuffers::String *received_date() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECEIVED_DATE);
  }
  const ::flatbuffers::String *expiration_period() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXPIRATION_PERIOD);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::item>> *attached_items() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::item>> *>(VT_ATTACHED_ITEMS);
  }
  bool is_checked() const {
    return GetField<uint8_t>(VT_IS_CHECKED, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_MAIL_ID, 8) &&
           VerifyOffset(verifier, VT_MAIL_NAME) &&
           verifier.VerifyString(mail_name()) &&
           VerifyOffset(verifier, VT_RECEIVED_DATE) &&
           verifier.VerifyString(received_date()) &&
           VerifyOffset(verifier, VT_EXPIRATION_PERIOD) &&
           verifier.VerifyString(expiration_period()) &&
           VerifyOffset(verifier, VT_ATTACHED_ITEMS) &&
           verifier.VerifyVector(attached_items()) &&
           verifier.VerifyVectorOfTables(attached_items()) &&
           VerifyField<uint8_t>(verifier, VT_IS_CHECKED, 1) &&
           verifier.EndTable();
  }
};

struct mailBuilder {
  typedef mail Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_mail_id(int64_t mail_id) {
    fbb_.AddElement<int64_t>(mail::VT_MAIL_ID, mail_id, 0);
  }
  void add_mail_name(::flatbuffers::Offset<::flatbuffers::String> mail_name) {
    fbb_.AddOffset(mail::VT_MAIL_NAME, mail_name);
  }
  void add_received_date(::flatbuffers::Offset<::flatbuffers::String> received_date) {
    fbb_.AddOffset(mail::VT_RECEIVED_DATE, received_date);
  }
  void add_expiration_period(::flatbuffers::Offset<::flatbuffers::String> expiration_period) {
    fbb_.AddOffset(mail::VT_EXPIRATION_PERIOD, expiration_period);
  }
  void add_attached_items(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::item>>> attached_items) {
    fbb_.AddOffset(mail::VT_ATTACHED_ITEMS, attached_items);
  }
  void add_is_checked(bool is_checked) {
    fbb_.AddElement<uint8_t>(mail::VT_IS_CHECKED, static_cast<uint8_t>(is_checked), 0);
  }
  explicit mailBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<mail> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<mail>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<mail> Createmail(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t mail_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> mail_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> received_date = 0,
    ::flatbuffers::Offset<::flatbuffers::String> expiration_period = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::item>>> attached_items = 0,
    bool is_checked = false) {
  mailBuilder builder_(_fbb);
  builder_.add_mail_id(mail_id);
  builder_.add_attached_items(attached_items);
  builder_.add_expiration_period(expiration_period);
  builder_.add_received_date(received_date);
  builder_.add_mail_name(mail_name);
  builder_.add_is_checked(is_checked);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<mail> CreatemailDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t mail_id = 0,
    const char *mail_name = nullptr,
    const char *received_date = nullptr,
    const char *expiration_period = nullptr,
    const std::vector<::flatbuffers::Offset<FlatPacket::item>> *attached_items = nullptr,
    bool is_checked = false) {
  auto mail_name__ = mail_name ? _fbb.CreateString(mail_name) : 0;
  auto received_date__ = received_date ? _fbb.CreateString(received_date) : 0;
  auto expiration_period__ = expiration_period ? _fbb.CreateString(expiration_period) : 0;
  auto attached_items__ = attached_items ? _fbb.CreateVector<::flatbuffers::Offset<FlatPacket::item>>(*attached_items) : 0;
  return FlatPacket::MailPacket::Createmail(
      _fbb,
      mail_id,
      mail_name__,
      received_date__,
      expiration_period__,
      attached_items__,
      is_checked);
}

struct ReceivedMailInformationPacket FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ReceivedMailInformationPacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REQUEST_RESULT = 4,
    VT_UUID = 6,
    VT_ROW_COUNT_LIMIT = 8,
    VT_TOTAL_MAIL_COUNT = 10,
    VT_PAGE = 12,
    VT_RECEIVED_MAILS = 14
  };
  int16_t request_result() const {
    return GetField<int16_t>(VT_REQUEST_RESULT, 0);
  }
  int32_t uuid() const {
    return GetField<int32_t>(VT_UUID, 0);
  }
  int16_t row_count_limit() const {
    return GetField<int16_t>(VT_ROW_COUNT_LIMIT, 0);
  }
  int16_t total_mail_count() const {
    return GetField<int16_t>(VT_TOTAL_MAIL_COUNT, 0);
  }
  int16_t page() const {
    return GetField<int16_t>(VT_PAGE, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::MailPacket::mail>> *received_mails() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::MailPacket::mail>> *>(VT_RECEIVED_MAILS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_REQUEST_RESULT, 2) &&
           VerifyField<int32_t>(verifier, VT_UUID, 4) &&
           VerifyField<int16_t>(verifier, VT_ROW_COUNT_LIMIT, 2) &&
           VerifyField<int16_t>(verifier, VT_TOTAL_MAIL_COUNT, 2) &&
           VerifyField<int16_t>(verifier, VT_PAGE, 2) &&
           VerifyOffset(verifier, VT_RECEIVED_MAILS) &&
           verifier.VerifyVector(received_mails()) &&
           verifier.VerifyVectorOfTables(received_mails()) &&
           verifier.EndTable();
  }
};

struct ReceivedMailInformationPacketBuilder {
  typedef ReceivedMailInformationPacket Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_request_result(int16_t request_result) {
    fbb_.AddElement<int16_t>(ReceivedMailInformationPacket::VT_REQUEST_RESULT, request_result, 0);
  }
  void add_uuid(int32_t uuid) {
    fbb_.AddElement<int32_t>(ReceivedMailInformationPacket::VT_UUID, uuid, 0);
  }
  void add_row_count_limit(int16_t row_count_limit) {
    fbb_.AddElement<int16_t>(ReceivedMailInformationPacket::VT_ROW_COUNT_LIMIT, row_count_limit, 0);
  }
  void add_total_mail_count(int16_t total_mail_count) {
    fbb_.AddElement<int16_t>(ReceivedMailInformationPacket::VT_TOTAL_MAIL_COUNT, total_mail_count, 0);
  }
  void add_page(int16_t page) {
    fbb_.AddElement<int16_t>(ReceivedMailInformationPacket::VT_PAGE, page, 0);
  }
  void add_received_mails(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::MailPacket::mail>>> received_mails) {
    fbb_.AddOffset(ReceivedMailInformationPacket::VT_RECEIVED_MAILS, received_mails);
  }
  explicit ReceivedMailInformationPacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ReceivedMailInformationPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ReceivedMailInformationPacket>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ReceivedMailInformationPacket> CreateReceivedMailInformationPacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t request_result = 0,
    int32_t uuid = 0,
    int16_t row_count_limit = 0,
    int16_t total_mail_count = 0,
    int16_t page = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::MailPacket::mail>>> received_mails = 0) {
  ReceivedMailInformationPacketBuilder builder_(_fbb);
  builder_.add_received_mails(received_mails);
  builder_.add_uuid(uuid);
  builder_.add_page(page);
  builder_.add_total_mail_count(total_mail_count);
  builder_.add_row_count_limit(row_count_limit);
  builder_.add_request_result(request_result);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ReceivedMailInformationPacket> CreateReceivedMailInformationPacketDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t request_result = 0,
    int32_t uuid = 0,
    int16_t row_count_limit = 0,
    int16_t total_mail_count = 0,
    int16_t page = 0,
    const std::vector<::flatbuffers::Offset<FlatPacket::MailPacket::mail>> *received_mails = nullptr) {
  auto received_mails__ = received_mails ? _fbb.CreateVector<::flatbuffers::Offset<FlatPacket::MailPacket::mail>>(*received_mails) : 0;
  return FlatPacket::MailPacket::CreateReceivedMailInformationPacket(
      _fbb,
      request_result,
      uuid,
      row_count_limit,
      total_mail_count,
      page,
      received_mails__);
}

inline const FlatPacket::MailPacket::ReceivedMailInformationPacket *GetReceivedMailInformationPacket(const void *buf) {
  return ::flatbuffers::GetRoot<FlatPacket::MailPacket::ReceivedMailInformationPacket>(buf);
}

inline const FlatPacket::MailPacket::ReceivedMailInformationPacket *GetSizePrefixedReceivedMailInformationPacket(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlatPacket::MailPacket::ReceivedMailInformationPacket>(buf);
}

inline bool VerifyReceivedMailInformationPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatPacket::MailPacket::ReceivedMailInformationPacket>(nullptr);
}

inline bool VerifySizePrefixedReceivedMailInformationPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatPacket::MailPacket::ReceivedMailInformationPacket>(nullptr);
}

inline void FinishReceivedMailInformationPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::MailPacket::ReceivedMailInformationPacket> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedReceivedMailInformationPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::MailPacket::ReceivedMailInformationPacket> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace MailPacket
}  // namespace FlatPacket

#endif  // FLATBUFFERS_GENERATED_MAILINFOPACKET_FLATPACKET_MAILPACKET_H_
