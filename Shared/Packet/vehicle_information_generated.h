// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_VEHICLEINFORMATION_FLATINGAMEPACKET_GAME_H_
#define FLATBUFFERS_GENERATED_VEHICLEINFORMATION_FLATINGAMEPACKET_GAME_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace FlatInGamePacket {
namespace Game {

struct vector;
struct vectorBuilder;

struct VehicleInformation;
struct VehicleInformationBuilder;

struct vector FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef vectorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  float z() const {
    return GetField<float>(VT_Z, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           VerifyField<float>(verifier, VT_Z, 4) &&
           verifier.EndTable();
  }
};

struct vectorBuilder {
  typedef vector Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(vector::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(vector::VT_Y, y, 0.0f);
  }
  void add_z(float z) {
    fbb_.AddElement<float>(vector::VT_Z, z, 0.0f);
  }
  explicit vectorBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<vector> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<vector>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<vector> Createvector(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f,
    float z = 0.0f) {
  vectorBuilder builder_(_fbb);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct VehicleInformation FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef VehicleInformationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LOCATION = 4,
    VT_ROTATION = 6,
    VT_VELOCITY = 8,
    VT_HORIZONTAL = 10
  };
  const FlatInGamePacket::Game::vector *location() const {
    return GetPointer<const FlatInGamePacket::Game::vector *>(VT_LOCATION);
  }
  const FlatInGamePacket::Game::vector *rotation() const {
    return GetPointer<const FlatInGamePacket::Game::vector *>(VT_ROTATION);
  }
  const FlatInGamePacket::Game::vector *velocity() const {
    return GetPointer<const FlatInGamePacket::Game::vector *>(VT_VELOCITY);
  }
  float horizontal() const {
    return GetField<float>(VT_HORIZONTAL, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LOCATION) &&
           verifier.VerifyTable(location()) &&
           VerifyOffset(verifier, VT_ROTATION) &&
           verifier.VerifyTable(rotation()) &&
           VerifyOffset(verifier, VT_VELOCITY) &&
           verifier.VerifyTable(velocity()) &&
           VerifyField<float>(verifier, VT_HORIZONTAL, 4) &&
           verifier.EndTable();
  }
};

struct VehicleInformationBuilder {
  typedef VehicleInformation Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_location(::flatbuffers::Offset<FlatInGamePacket::Game::vector> location) {
    fbb_.AddOffset(VehicleInformation::VT_LOCATION, location);
  }
  void add_rotation(::flatbuffers::Offset<FlatInGamePacket::Game::vector> rotation) {
    fbb_.AddOffset(VehicleInformation::VT_ROTATION, rotation);
  }
  void add_velocity(::flatbuffers::Offset<FlatInGamePacket::Game::vector> velocity) {
    fbb_.AddOffset(VehicleInformation::VT_VELOCITY, velocity);
  }
  void add_horizontal(float horizontal) {
    fbb_.AddElement<float>(VehicleInformation::VT_HORIZONTAL, horizontal, 0.0f);
  }
  explicit VehicleInformationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<VehicleInformation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<VehicleInformation>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<VehicleInformation> CreateVehicleInformation(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<FlatInGamePacket::Game::vector> location = 0,
    ::flatbuffers::Offset<FlatInGamePacket::Game::vector> rotation = 0,
    ::flatbuffers::Offset<FlatInGamePacket::Game::vector> velocity = 0,
    float horizontal = 0.0f) {
  VehicleInformationBuilder builder_(_fbb);
  builder_.add_horizontal(horizontal);
  builder_.add_velocity(velocity);
  builder_.add_rotation(rotation);
  builder_.add_location(location);
  return builder_.Finish();
}

inline const FlatInGamePacket::Game::VehicleInformation *GetVehicleInformation(const void *buf) {
  return ::flatbuffers::GetRoot<FlatInGamePacket::Game::VehicleInformation>(buf);
}

inline const FlatInGamePacket::Game::VehicleInformation *GetSizePrefixedVehicleInformation(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlatInGamePacket::Game::VehicleInformation>(buf);
}

inline bool VerifyVehicleInformationBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatInGamePacket::Game::VehicleInformation>(nullptr);
}

inline bool VerifySizePrefixedVehicleInformationBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatInGamePacket::Game::VehicleInformation>(nullptr);
}

inline void FinishVehicleInformationBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatInGamePacket::Game::VehicleInformation> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedVehicleInformationBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatInGamePacket::Game::VehicleInformation> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Game
}  // namespace FlatInGamePacket

#endif  // FLATBUFFERS_GENERATED_VEHICLEINFORMATION_FLATINGAMEPACKET_GAME_H_
