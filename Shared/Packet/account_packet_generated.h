// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ACCOUNTPACKET_FLATPACKET_ACCOUNTPACKET_H_
#define FLATBUFFERS_GENERATED_ACCOUNTPACKET_FLATPACKET_ACCOUNTPACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace FlatPacket {
namespace AccountPacket {

struct AccountPacket;
struct AccountPacketBuilder;

struct AccountPacket FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AccountPacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE_TYPE = 4,
    VT_USER_ID = 6,
    VT_USER_PWD = 8,
    VT_USER_NAME = 10,
    VT_UUID = 12,
    VT_ALREADY_LOGGED_IN = 14
  };
  int16_t message_type() const {
    return GetField<int16_t>(VT_MESSAGE_TYPE, 0);
  }
  const ::flatbuffers::String *user_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER_ID);
  }
  const ::flatbuffers::String *user_pwd() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER_PWD);
  }
  const ::flatbuffers::String *user_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER_NAME);
  }
  int32_t uuid() const {
    return GetField<int32_t>(VT_UUID, 0);
  }
  bool already_logged_in() const {
    return GetField<uint8_t>(VT_ALREADY_LOGGED_IN, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_MESSAGE_TYPE, 2) &&
           VerifyOffset(verifier, VT_USER_ID) &&
           verifier.VerifyString(user_id()) &&
           VerifyOffset(verifier, VT_USER_PWD) &&
           verifier.VerifyString(user_pwd()) &&
           VerifyOffset(verifier, VT_USER_NAME) &&
           verifier.VerifyString(user_name()) &&
           VerifyField<int32_t>(verifier, VT_UUID, 4) &&
           VerifyField<uint8_t>(verifier, VT_ALREADY_LOGGED_IN, 1) &&
           verifier.EndTable();
  }
};

struct AccountPacketBuilder {
  typedef AccountPacket Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_message_type(int16_t message_type) {
    fbb_.AddElement<int16_t>(AccountPacket::VT_MESSAGE_TYPE, message_type, 0);
  }
  void add_user_id(::flatbuffers::Offset<::flatbuffers::String> user_id) {
    fbb_.AddOffset(AccountPacket::VT_USER_ID, user_id);
  }
  void add_user_pwd(::flatbuffers::Offset<::flatbuffers::String> user_pwd) {
    fbb_.AddOffset(AccountPacket::VT_USER_PWD, user_pwd);
  }
  void add_user_name(::flatbuffers::Offset<::flatbuffers::String> user_name) {
    fbb_.AddOffset(AccountPacket::VT_USER_NAME, user_name);
  }
  void add_uuid(int32_t uuid) {
    fbb_.AddElement<int32_t>(AccountPacket::VT_UUID, uuid, 0);
  }
  void add_already_logged_in(bool already_logged_in) {
    fbb_.AddElement<uint8_t>(AccountPacket::VT_ALREADY_LOGGED_IN, static_cast<uint8_t>(already_logged_in), 0);
  }
  explicit AccountPacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AccountPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AccountPacket>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AccountPacket> CreateAccountPacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t message_type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> user_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> user_pwd = 0,
    ::flatbuffers::Offset<::flatbuffers::String> user_name = 0,
    int32_t uuid = 0,
    bool already_logged_in = false) {
  AccountPacketBuilder builder_(_fbb);
  builder_.add_uuid(uuid);
  builder_.add_user_name(user_name);
  builder_.add_user_pwd(user_pwd);
  builder_.add_user_id(user_id);
  builder_.add_message_type(message_type);
  builder_.add_already_logged_in(already_logged_in);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AccountPacket> CreateAccountPacketDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t message_type = 0,
    const char *user_id = nullptr,
    const char *user_pwd = nullptr,
    const char *user_name = nullptr,
    int32_t uuid = 0,
    bool already_logged_in = false) {
  auto user_id__ = user_id ? _fbb.CreateString(user_id) : 0;
  auto user_pwd__ = user_pwd ? _fbb.CreateString(user_pwd) : 0;
  auto user_name__ = user_name ? _fbb.CreateString(user_name) : 0;
  return FlatPacket::AccountPacket::CreateAccountPacket(
      _fbb,
      message_type,
      user_id__,
      user_pwd__,
      user_name__,
      uuid,
      already_logged_in);
}

inline const FlatPacket::AccountPacket::AccountPacket *GetAccountPacket(const void *buf) {
  return ::flatbuffers::GetRoot<FlatPacket::AccountPacket::AccountPacket>(buf);
}

inline const FlatPacket::AccountPacket::AccountPacket *GetSizePrefixedAccountPacket(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlatPacket::AccountPacket::AccountPacket>(buf);
}

inline bool VerifyAccountPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatPacket::AccountPacket::AccountPacket>(nullptr);
}

inline bool VerifySizePrefixedAccountPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatPacket::AccountPacket::AccountPacket>(nullptr);
}

inline void FinishAccountPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::AccountPacket::AccountPacket> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAccountPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::AccountPacket::AccountPacket> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace AccountPacket
}  // namespace FlatPacket

#endif  // FLATBUFFERS_GENERATED_ACCOUNTPACKET_FLATPACKET_ACCOUNTPACKET_H_
