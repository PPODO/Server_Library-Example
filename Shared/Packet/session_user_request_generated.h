// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SESSIONUSERREQUEST_FLATPACKET_SESSIONPACKET_H_
#define FLATBUFFERS_GENERATED_SESSIONUSERREQUEST_FLATPACKET_SESSIONPACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "session_info_generated.h"

namespace FlatPacket {
namespace SessionPacket {

struct SessionUserRequestPacket;
struct SessionUserRequestPacketBuilder;

enum SessionRequestType : int8_t {
  SessionRequestType_ESRT_None = 0,
  SessionRequestType_ESRT_Ready = 1,
  SessionRequestType_ESRT_NotReady = 2,
  SessionRequestType_ESRT_Chat = 3,
  SessionRequestType_ESRT_Start = 4,
  SessionRequestType_ESRT_Quit = 5,
  SessionRequestType_MIN = SessionRequestType_ESRT_None,
  SessionRequestType_MAX = SessionRequestType_ESRT_Quit
};

inline const SessionRequestType (&EnumValuesSessionRequestType())[6] {
  static const SessionRequestType values[] = {
    SessionRequestType_ESRT_None,
    SessionRequestType_ESRT_Ready,
    SessionRequestType_ESRT_NotReady,
    SessionRequestType_ESRT_Chat,
    SessionRequestType_ESRT_Start,
    SessionRequestType_ESRT_Quit
  };
  return values;
}

inline const char * const *EnumNamesSessionRequestType() {
  static const char * const names[7] = {
    "ESRT_None",
    "ESRT_Ready",
    "ESRT_NotReady",
    "ESRT_Chat",
    "ESRT_Start",
    "ESRT_Quit",
    nullptr
  };
  return names;
}

inline const char *EnumNameSessionRequestType(SessionRequestType e) {
  if (::flatbuffers::IsOutRange(e, SessionRequestType_ESRT_None, SessionRequestType_ESRT_Quit)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSessionRequestType()[index];
}

struct SessionUserRequestPacket FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SessionUserRequestPacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SESSION_ID = 4,
    VT_UUID = 6,
    VT_REQUEST = 8,
    VT_MESSAGE = 10
  };
  int32_t session_id() const {
    return GetField<int32_t>(VT_SESSION_ID, 0);
  }
  int32_t uuid() const {
    return GetField<int32_t>(VT_UUID, 0);
  }
  int16_t request() const {
    return GetField<int16_t>(VT_REQUEST, 0);
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_SESSION_ID, 4) &&
           VerifyField<int32_t>(verifier, VT_UUID, 4) &&
           VerifyField<int16_t>(verifier, VT_REQUEST, 2) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct SessionUserRequestPacketBuilder {
  typedef SessionUserRequestPacket Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_session_id(int32_t session_id) {
    fbb_.AddElement<int32_t>(SessionUserRequestPacket::VT_SESSION_ID, session_id, 0);
  }
  void add_uuid(int32_t uuid) {
    fbb_.AddElement<int32_t>(SessionUserRequestPacket::VT_UUID, uuid, 0);
  }
  void add_request(int16_t request) {
    fbb_.AddElement<int16_t>(SessionUserRequestPacket::VT_REQUEST, request, 0);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(SessionUserRequestPacket::VT_MESSAGE, message);
  }
  explicit SessionUserRequestPacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SessionUserRequestPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SessionUserRequestPacket>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SessionUserRequestPacket> CreateSessionUserRequestPacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t session_id = 0,
    int32_t uuid = 0,
    int16_t request = 0,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  SessionUserRequestPacketBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_uuid(uuid);
  builder_.add_session_id(session_id);
  builder_.add_request(request);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SessionUserRequestPacket> CreateSessionUserRequestPacketDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t session_id = 0,
    int32_t uuid = 0,
    int16_t request = 0,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return FlatPacket::SessionPacket::CreateSessionUserRequestPacket(
      _fbb,
      session_id,
      uuid,
      request,
      message__);
}

inline const FlatPacket::SessionPacket::SessionUserRequestPacket *GetSessionUserRequestPacket(const void *buf) {
  return ::flatbuffers::GetRoot<FlatPacket::SessionPacket::SessionUserRequestPacket>(buf);
}

inline const FlatPacket::SessionPacket::SessionUserRequestPacket *GetSizePrefixedSessionUserRequestPacket(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlatPacket::SessionPacket::SessionUserRequestPacket>(buf);
}

inline bool VerifySessionUserRequestPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatPacket::SessionPacket::SessionUserRequestPacket>(nullptr);
}

inline bool VerifySizePrefixedSessionUserRequestPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatPacket::SessionPacket::SessionUserRequestPacket>(nullptr);
}

inline void FinishSessionUserRequestPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::SessionPacket::SessionUserRequestPacket> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSessionUserRequestPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::SessionPacket::SessionUserRequestPacket> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace SessionPacket
}  // namespace FlatPacket

#endif  // FLATBUFFERS_GENERATED_SESSIONUSERREQUEST_FLATPACKET_SESSIONPACKET_H_
