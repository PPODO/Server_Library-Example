// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CHECKMAIL_FLATPACKET_MAILPACKET_H_
#define FLATBUFFERS_GENERATED_CHECKMAIL_FLATPACKET_MAILPACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace FlatPacket {
namespace MailPacket {

struct CheckMail;
struct CheckMailBuilder;

struct CheckMail FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CheckMailBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REQUEST_RESULT = 4,
    VT_UUID = 6,
    VT_MAIL_ID = 8
  };
  int16_t request_result() const {
    return GetField<int16_t>(VT_REQUEST_RESULT, 0);
  }
  int32_t uuid() const {
    return GetField<int32_t>(VT_UUID, 0);
  }
  int64_t mail_id() const {
    return GetField<int64_t>(VT_MAIL_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_REQUEST_RESULT, 2) &&
           VerifyField<int32_t>(verifier, VT_UUID, 4) &&
           VerifyField<int64_t>(verifier, VT_MAIL_ID, 8) &&
           verifier.EndTable();
  }
};

struct CheckMailBuilder {
  typedef CheckMail Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_request_result(int16_t request_result) {
    fbb_.AddElement<int16_t>(CheckMail::VT_REQUEST_RESULT, request_result, 0);
  }
  void add_uuid(int32_t uuid) {
    fbb_.AddElement<int32_t>(CheckMail::VT_UUID, uuid, 0);
  }
  void add_mail_id(int64_t mail_id) {
    fbb_.AddElement<int64_t>(CheckMail::VT_MAIL_ID, mail_id, 0);
  }
  explicit CheckMailBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CheckMail> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CheckMail>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CheckMail> CreateCheckMail(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t request_result = 0,
    int32_t uuid = 0,
    int64_t mail_id = 0) {
  CheckMailBuilder builder_(_fbb);
  builder_.add_mail_id(mail_id);
  builder_.add_uuid(uuid);
  builder_.add_request_result(request_result);
  return builder_.Finish();
}

inline const FlatPacket::MailPacket::CheckMail *GetCheckMail(const void *buf) {
  return ::flatbuffers::GetRoot<FlatPacket::MailPacket::CheckMail>(buf);
}

inline const FlatPacket::MailPacket::CheckMail *GetSizePrefixedCheckMail(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlatPacket::MailPacket::CheckMail>(buf);
}

inline bool VerifyCheckMailBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatPacket::MailPacket::CheckMail>(nullptr);
}

inline bool VerifySizePrefixedCheckMailBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatPacket::MailPacket::CheckMail>(nullptr);
}

inline void FinishCheckMailBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::MailPacket::CheckMail> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCheckMailBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::MailPacket::CheckMail> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace MailPacket
}  // namespace FlatPacket

#endif  // FLATBUFFERS_GENERATED_CHECKMAIL_FLATPACKET_MAILPACKET_H_
