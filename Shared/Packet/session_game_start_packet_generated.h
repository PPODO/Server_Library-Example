// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SESSIONGAMESTARTPACKET_FLATPACKET_SESSIONPACKET_H_
#define FLATBUFFERS_GENERATED_SESSIONGAMESTARTPACKET_FLATPACKET_SESSIONPACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace FlatPacket {
namespace SessionPacket {

struct SessionGameStartPacket;
struct SessionGameStartPacketBuilder;

struct SessionGameStartPacket FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SessionGameStartPacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SERVER_ADDRESS = 4,
    VT_SERVER_PORT_NUMBER = 6
  };
  const ::flatbuffers::String *server_address() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SERVER_ADDRESS);
  }
  int16_t server_port_number() const {
    return GetField<int16_t>(VT_SERVER_PORT_NUMBER, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SERVER_ADDRESS) &&
           verifier.VerifyString(server_address()) &&
           VerifyField<int16_t>(verifier, VT_SERVER_PORT_NUMBER, 2) &&
           verifier.EndTable();
  }
};

struct SessionGameStartPacketBuilder {
  typedef SessionGameStartPacket Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_server_address(::flatbuffers::Offset<::flatbuffers::String> server_address) {
    fbb_.AddOffset(SessionGameStartPacket::VT_SERVER_ADDRESS, server_address);
  }
  void add_server_port_number(int16_t server_port_number) {
    fbb_.AddElement<int16_t>(SessionGameStartPacket::VT_SERVER_PORT_NUMBER, server_port_number, 0);
  }
  explicit SessionGameStartPacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SessionGameStartPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SessionGameStartPacket>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SessionGameStartPacket> CreateSessionGameStartPacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> server_address = 0,
    int16_t server_port_number = 0) {
  SessionGameStartPacketBuilder builder_(_fbb);
  builder_.add_server_address(server_address);
  builder_.add_server_port_number(server_port_number);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SessionGameStartPacket> CreateSessionGameStartPacketDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *server_address = nullptr,
    int16_t server_port_number = 0) {
  auto server_address__ = server_address ? _fbb.CreateString(server_address) : 0;
  return FlatPacket::SessionPacket::CreateSessionGameStartPacket(
      _fbb,
      server_address__,
      server_port_number);
}

inline const FlatPacket::SessionPacket::SessionGameStartPacket *GetSessionGameStartPacket(const void *buf) {
  return ::flatbuffers::GetRoot<FlatPacket::SessionPacket::SessionGameStartPacket>(buf);
}

inline const FlatPacket::SessionPacket::SessionGameStartPacket *GetSizePrefixedSessionGameStartPacket(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlatPacket::SessionPacket::SessionGameStartPacket>(buf);
}

inline bool VerifySessionGameStartPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatPacket::SessionPacket::SessionGameStartPacket>(nullptr);
}

inline bool VerifySizePrefixedSessionGameStartPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatPacket::SessionPacket::SessionGameStartPacket>(nullptr);
}

inline void FinishSessionGameStartPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::SessionPacket::SessionGameStartPacket> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSessionGameStartPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::SessionPacket::SessionGameStartPacket> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace SessionPacket
}  // namespace FlatPacket

#endif  // FLATBUFFERS_GENERATED_SESSIONGAMESTARTPACKET_FLATPACKET_SESSIONPACKET_H_
