// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEST_H_
#define FLATBUFFERS_GENERATED_TEST_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct TestPacket;
struct TestPacketBuilder;

enum type : int8_t {
  type_None = 0,
  type_Msg = 1,
  type_MIN = type_None,
  type_MAX = type_Msg
};

inline const type (&EnumValuestype())[2] {
  static const type values[] = {
    type_None,
    type_Msg
  };
  return values;
}

inline const char * const *EnumNamestype() {
  static const char * const names[3] = {
    "None",
    "Msg",
    nullptr
  };
  return names;
}

inline const char *EnumNametype(type e) {
  if (::flatbuffers::IsOutRange(e, type_None, type_Msg)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamestype()[index];
}

struct TestPacket FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TestPacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE = 4
  };
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct TestPacketBuilder {
  typedef TestPacket Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(TestPacket::VT_MESSAGE, message);
  }
  explicit TestPacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TestPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TestPacket>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TestPacket> CreateTestPacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  TestPacketBuilder builder_(_fbb);
  builder_.add_message(message);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TestPacket> CreateTestPacketDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return CreateTestPacket(
      _fbb,
      message__);
}

inline const TestPacket *GetTestPacket(const void *buf) {
  return ::flatbuffers::GetRoot<TestPacket>(buf);
}

inline const TestPacket *GetSizePrefixedTestPacket(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<TestPacket>(buf);
}

inline bool VerifyTestPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<TestPacket>(nullptr);
}

inline bool VerifySizePrefixedTestPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<TestPacket>(nullptr);
}

inline void FinishTestPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<TestPacket> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTestPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<TestPacket> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_TEST_H_
