// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ATTENDANCESHEETPACKET_FLATPACKET_ATTENDANCEPACKET_H_
#define FLATBUFFERS_GENERATED_ATTENDANCESHEETPACKET_FLATPACKET_ATTENDANCEPACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "attendance_data_define_generated.h"

namespace FlatPacket {
namespace AttendancePacket {

struct AttendanceDetail;
struct AttendanceDetailBuilder;

struct AttendanceSheetsPacket;
struct AttendanceSheetsPacketBuilder;

struct AttendanceDetail FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AttendanceDetailBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EVENT_TYPE = 4,
    VT_EVENT_ID = 6,
    VT_EVENT_NAME = 8,
    VT_CURRENT_ATTENDANCE_COUNT = 10,
    VT_MAX_ATTENDANCE_DAY = 12,
    VT_ATTENDANCE_REWARDS = 14
  };
  int16_t event_type() const {
    return GetField<int16_t>(VT_EVENT_TYPE, 0);
  }
  int16_t event_id() const {
    return GetField<int16_t>(VT_EVENT_ID, 0);
  }
  const ::flatbuffers::String *event_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EVENT_NAME);
  }
  int16_t current_attendance_count() const {
    return GetField<int16_t>(VT_CURRENT_ATTENDANCE_COUNT, 0);
  }
  int16_t max_attendance_day() const {
    return GetField<int16_t>(VT_MAX_ATTENDANCE_DAY, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::AttendancePacket::attendance_reward>> *attendance_rewards() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::AttendancePacket::attendance_reward>> *>(VT_ATTENDANCE_REWARDS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_EVENT_TYPE, 2) &&
           VerifyField<int16_t>(verifier, VT_EVENT_ID, 2) &&
           VerifyOffset(verifier, VT_EVENT_NAME) &&
           verifier.VerifyString(event_name()) &&
           VerifyField<int16_t>(verifier, VT_CURRENT_ATTENDANCE_COUNT, 2) &&
           VerifyField<int16_t>(verifier, VT_MAX_ATTENDANCE_DAY, 2) &&
           VerifyOffset(verifier, VT_ATTENDANCE_REWARDS) &&
           verifier.VerifyVector(attendance_rewards()) &&
           verifier.VerifyVectorOfTables(attendance_rewards()) &&
           verifier.EndTable();
  }
};

struct AttendanceDetailBuilder {
  typedef AttendanceDetail Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_event_type(int16_t event_type) {
    fbb_.AddElement<int16_t>(AttendanceDetail::VT_EVENT_TYPE, event_type, 0);
  }
  void add_event_id(int16_t event_id) {
    fbb_.AddElement<int16_t>(AttendanceDetail::VT_EVENT_ID, event_id, 0);
  }
  void add_event_name(::flatbuffers::Offset<::flatbuffers::String> event_name) {
    fbb_.AddOffset(AttendanceDetail::VT_EVENT_NAME, event_name);
  }
  void add_current_attendance_count(int16_t current_attendance_count) {
    fbb_.AddElement<int16_t>(AttendanceDetail::VT_CURRENT_ATTENDANCE_COUNT, current_attendance_count, 0);
  }
  void add_max_attendance_day(int16_t max_attendance_day) {
    fbb_.AddElement<int16_t>(AttendanceDetail::VT_MAX_ATTENDANCE_DAY, max_attendance_day, 0);
  }
  void add_attendance_rewards(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::AttendancePacket::attendance_reward>>> attendance_rewards) {
    fbb_.AddOffset(AttendanceDetail::VT_ATTENDANCE_REWARDS, attendance_rewards);
  }
  explicit AttendanceDetailBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AttendanceDetail> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AttendanceDetail>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AttendanceDetail> CreateAttendanceDetail(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t event_type = 0,
    int16_t event_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> event_name = 0,
    int16_t current_attendance_count = 0,
    int16_t max_attendance_day = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::AttendancePacket::attendance_reward>>> attendance_rewards = 0) {
  AttendanceDetailBuilder builder_(_fbb);
  builder_.add_attendance_rewards(attendance_rewards);
  builder_.add_event_name(event_name);
  builder_.add_max_attendance_day(max_attendance_day);
  builder_.add_current_attendance_count(current_attendance_count);
  builder_.add_event_id(event_id);
  builder_.add_event_type(event_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AttendanceDetail> CreateAttendanceDetailDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t event_type = 0,
    int16_t event_id = 0,
    const char *event_name = nullptr,
    int16_t current_attendance_count = 0,
    int16_t max_attendance_day = 0,
    std::vector<::flatbuffers::Offset<FlatPacket::AttendancePacket::attendance_reward>> *attendance_rewards = nullptr) {
  auto event_name__ = event_name ? _fbb.CreateString(event_name) : 0;
  auto attendance_rewards__ = attendance_rewards ? _fbb.CreateVectorOfSortedTables<FlatPacket::AttendancePacket::attendance_reward>(attendance_rewards) : 0;
  return FlatPacket::AttendancePacket::CreateAttendanceDetail(
      _fbb,
      event_type,
      event_id,
      event_name__,
      current_attendance_count,
      max_attendance_day,
      attendance_rewards__);
}

struct AttendanceSheetsPacket FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AttendanceSheetsPacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REQUEST_RESULT = 4,
    VT_UUID = 6,
    VT_REQUESTED_EVENT_TYPE = 8,
    VT_ATTENDANCE_SHEETS = 10
  };
  int16_t request_result() const {
    return GetField<int16_t>(VT_REQUEST_RESULT, 0);
  }
  int32_t uuid() const {
    return GetField<int32_t>(VT_UUID, 0);
  }
  int16_t requested_event_type() const {
    return GetField<int16_t>(VT_REQUESTED_EVENT_TYPE, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::AttendancePacket::AttendanceDetail>> *attendance_sheets() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::AttendancePacket::AttendanceDetail>> *>(VT_ATTENDANCE_SHEETS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_REQUEST_RESULT, 2) &&
           VerifyField<int32_t>(verifier, VT_UUID, 4) &&
           VerifyField<int16_t>(verifier, VT_REQUESTED_EVENT_TYPE, 2) &&
           VerifyOffset(verifier, VT_ATTENDANCE_SHEETS) &&
           verifier.VerifyVector(attendance_sheets()) &&
           verifier.VerifyVectorOfTables(attendance_sheets()) &&
           verifier.EndTable();
  }
};

struct AttendanceSheetsPacketBuilder {
  typedef AttendanceSheetsPacket Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_request_result(int16_t request_result) {
    fbb_.AddElement<int16_t>(AttendanceSheetsPacket::VT_REQUEST_RESULT, request_result, 0);
  }
  void add_uuid(int32_t uuid) {
    fbb_.AddElement<int32_t>(AttendanceSheetsPacket::VT_UUID, uuid, 0);
  }
  void add_requested_event_type(int16_t requested_event_type) {
    fbb_.AddElement<int16_t>(AttendanceSheetsPacket::VT_REQUESTED_EVENT_TYPE, requested_event_type, 0);
  }
  void add_attendance_sheets(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::AttendancePacket::AttendanceDetail>>> attendance_sheets) {
    fbb_.AddOffset(AttendanceSheetsPacket::VT_ATTENDANCE_SHEETS, attendance_sheets);
  }
  explicit AttendanceSheetsPacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AttendanceSheetsPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AttendanceSheetsPacket>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AttendanceSheetsPacket> CreateAttendanceSheetsPacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t request_result = 0,
    int32_t uuid = 0,
    int16_t requested_event_type = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FlatPacket::AttendancePacket::AttendanceDetail>>> attendance_sheets = 0) {
  AttendanceSheetsPacketBuilder builder_(_fbb);
  builder_.add_attendance_sheets(attendance_sheets);
  builder_.add_uuid(uuid);
  builder_.add_requested_event_type(requested_event_type);
  builder_.add_request_result(request_result);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AttendanceSheetsPacket> CreateAttendanceSheetsPacketDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t request_result = 0,
    int32_t uuid = 0,
    int16_t requested_event_type = 0,
    const std::vector<::flatbuffers::Offset<FlatPacket::AttendancePacket::AttendanceDetail>> *attendance_sheets = nullptr) {
  auto attendance_sheets__ = attendance_sheets ? _fbb.CreateVector<::flatbuffers::Offset<FlatPacket::AttendancePacket::AttendanceDetail>>(*attendance_sheets) : 0;
  return FlatPacket::AttendancePacket::CreateAttendanceSheetsPacket(
      _fbb,
      request_result,
      uuid,
      requested_event_type,
      attendance_sheets__);
}

inline const FlatPacket::AttendancePacket::AttendanceSheetsPacket *GetAttendanceSheetsPacket(const void *buf) {
  return ::flatbuffers::GetRoot<FlatPacket::AttendancePacket::AttendanceSheetsPacket>(buf);
}

inline const FlatPacket::AttendancePacket::AttendanceSheetsPacket *GetSizePrefixedAttendanceSheetsPacket(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlatPacket::AttendancePacket::AttendanceSheetsPacket>(buf);
}

inline bool VerifyAttendanceSheetsPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatPacket::AttendancePacket::AttendanceSheetsPacket>(nullptr);
}

inline bool VerifySizePrefixedAttendanceSheetsPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatPacket::AttendancePacket::AttendanceSheetsPacket>(nullptr);
}

inline void FinishAttendanceSheetsPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::AttendancePacket::AttendanceSheetsPacket> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAttendanceSheetsPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::AttendancePacket::AttendanceSheetsPacket> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace AttendancePacket
}  // namespace FlatPacket

#endif  // FLATBUFFERS_GENERATED_ATTENDANCESHEETPACKET_FLATPACKET_ATTENDANCEPACKET_H_
