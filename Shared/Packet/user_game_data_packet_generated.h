// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_USERGAMEDATAPACKET_FLATINGAMEPACKET_GAME_H_
#define FLATBUFFERS_GENERATED_USERGAMEDATAPACKET_FLATINGAMEPACKET_GAME_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "vehicle_information_generated.h"

namespace FlatInGamePacket {
namespace Game {

struct GameData;
struct GameDataBuilder;

struct GameDataPacket;
struct GameDataPacketBuilder;

struct GameData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_VEHICLE_TRANSFORM = 6
  };
  int32_t uuid() const {
    return GetField<int32_t>(VT_UUID, 0);
  }
  const FlatInGamePacket::Game::VehicleInformation *vehicle_transform() const {
    return GetPointer<const FlatInGamePacket::Game::VehicleInformation *>(VT_VEHICLE_TRANSFORM);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_UUID, 4) &&
           VerifyOffset(verifier, VT_VEHICLE_TRANSFORM) &&
           verifier.VerifyTable(vehicle_transform()) &&
           verifier.EndTable();
  }
};

struct GameDataBuilder {
  typedef GameData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_uuid(int32_t uuid) {
    fbb_.AddElement<int32_t>(GameData::VT_UUID, uuid, 0);
  }
  void add_vehicle_transform(::flatbuffers::Offset<FlatInGamePacket::Game::VehicleInformation> vehicle_transform) {
    fbb_.AddOffset(GameData::VT_VEHICLE_TRANSFORM, vehicle_transform);
  }
  explicit GameDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GameData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GameData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GameData> CreateGameData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t uuid = 0,
    ::flatbuffers::Offset<FlatInGamePacket::Game::VehicleInformation> vehicle_transform = 0) {
  GameDataBuilder builder_(_fbb);
  builder_.add_vehicle_transform(vehicle_transform);
  builder_.add_uuid(uuid);
  return builder_.Finish();
}

struct GameDataPacket FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameDataPacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_GAME_DATA = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<FlatInGamePacket::Game::GameData>> *user_game_data() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<FlatInGamePacket::Game::GameData>> *>(VT_USER_GAME_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USER_GAME_DATA) &&
           verifier.VerifyVector(user_game_data()) &&
           verifier.VerifyVectorOfTables(user_game_data()) &&
           verifier.EndTable();
  }
};

struct GameDataPacketBuilder {
  typedef GameDataPacket Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_game_data(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FlatInGamePacket::Game::GameData>>> user_game_data) {
    fbb_.AddOffset(GameDataPacket::VT_USER_GAME_DATA, user_game_data);
  }
  explicit GameDataPacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GameDataPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GameDataPacket>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GameDataPacket> CreateGameDataPacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FlatInGamePacket::Game::GameData>>> user_game_data = 0) {
  GameDataPacketBuilder builder_(_fbb);
  builder_.add_user_game_data(user_game_data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GameDataPacket> CreateGameDataPacketDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<FlatInGamePacket::Game::GameData>> *user_game_data = nullptr) {
  auto user_game_data__ = user_game_data ? _fbb.CreateVector<::flatbuffers::Offset<FlatInGamePacket::Game::GameData>>(*user_game_data) : 0;
  return FlatInGamePacket::Game::CreateGameDataPacket(
      _fbb,
      user_game_data__);
}

inline const FlatInGamePacket::Game::GameDataPacket *GetGameDataPacket(const void *buf) {
  return ::flatbuffers::GetRoot<FlatInGamePacket::Game::GameDataPacket>(buf);
}

inline const FlatInGamePacket::Game::GameDataPacket *GetSizePrefixedGameDataPacket(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlatInGamePacket::Game::GameDataPacket>(buf);
}

inline bool VerifyGameDataPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatInGamePacket::Game::GameDataPacket>(nullptr);
}

inline bool VerifySizePrefixedGameDataPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatInGamePacket::Game::GameDataPacket>(nullptr);
}

inline void FinishGameDataPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatInGamePacket::Game::GameDataPacket> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGameDataPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatInGamePacket::Game::GameDataPacket> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Game
}  // namespace FlatInGamePacket

#endif  // FLATBUFFERS_GENERATED_USERGAMEDATAPACKET_FLATINGAMEPACKET_GAME_H_
