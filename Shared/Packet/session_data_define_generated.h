// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SESSIONDATADEFINE_FLATPACKET_SESSIONPACKET_H_
#define FLATBUFFERS_GENERATED_SESSIONDATADEFINE_FLATPACKET_SESSIONPACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "data_define_generated.h"

namespace FlatPacket {
namespace SessionPacket {

struct session_user_info;
struct session_user_infoBuilder;

struct session_user_info FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef session_user_infoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_USER_NAME = 6,
    VT_IS_HOST = 8,
    VT_READY_STATE = 10
  };
  int32_t uuid() const {
    return GetField<int32_t>(VT_UUID, 0);
  }
  const ::flatbuffers::String *user_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER_NAME);
  }
  bool is_host() const {
    return GetField<uint8_t>(VT_IS_HOST, 0) != 0;
  }
  bool ready_state() const {
    return GetField<uint8_t>(VT_READY_STATE, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_UUID, 4) &&
           VerifyOffset(verifier, VT_USER_NAME) &&
           verifier.VerifyString(user_name()) &&
           VerifyField<uint8_t>(verifier, VT_IS_HOST, 1) &&
           VerifyField<uint8_t>(verifier, VT_READY_STATE, 1) &&
           verifier.EndTable();
  }
};

struct session_user_infoBuilder {
  typedef session_user_info Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_uuid(int32_t uuid) {
    fbb_.AddElement<int32_t>(session_user_info::VT_UUID, uuid, 0);
  }
  void add_user_name(::flatbuffers::Offset<::flatbuffers::String> user_name) {
    fbb_.AddOffset(session_user_info::VT_USER_NAME, user_name);
  }
  void add_is_host(bool is_host) {
    fbb_.AddElement<uint8_t>(session_user_info::VT_IS_HOST, static_cast<uint8_t>(is_host), 0);
  }
  void add_ready_state(bool ready_state) {
    fbb_.AddElement<uint8_t>(session_user_info::VT_READY_STATE, static_cast<uint8_t>(ready_state), 0);
  }
  explicit session_user_infoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<session_user_info> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<session_user_info>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<session_user_info> Createsession_user_info(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t uuid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> user_name = 0,
    bool is_host = false,
    bool ready_state = false) {
  session_user_infoBuilder builder_(_fbb);
  builder_.add_user_name(user_name);
  builder_.add_uuid(uuid);
  builder_.add_ready_state(ready_state);
  builder_.add_is_host(is_host);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<session_user_info> Createsession_user_infoDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t uuid = 0,
    const char *user_name = nullptr,
    bool is_host = false,
    bool ready_state = false) {
  auto user_name__ = user_name ? _fbb.CreateString(user_name) : 0;
  return FlatPacket::SessionPacket::Createsession_user_info(
      _fbb,
      uuid,
      user_name__,
      is_host,
      ready_state);
}

inline const FlatPacket::SessionPacket::session_user_info *Getsession_user_info(const void *buf) {
  return ::flatbuffers::GetRoot<FlatPacket::SessionPacket::session_user_info>(buf);
}

inline const FlatPacket::SessionPacket::session_user_info *GetSizePrefixedsession_user_info(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlatPacket::SessionPacket::session_user_info>(buf);
}

inline bool Verifysession_user_infoBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatPacket::SessionPacket::session_user_info>(nullptr);
}

inline bool VerifySizePrefixedsession_user_infoBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatPacket::SessionPacket::session_user_info>(nullptr);
}

inline void Finishsession_user_infoBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::SessionPacket::session_user_info> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedsession_user_infoBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::SessionPacket::session_user_info> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace SessionPacket
}  // namespace FlatPacket

#endif  // FLATBUFFERS_GENERATED_SESSIONDATADEFINE_FLATPACKET_SESSIONPACKET_H_
