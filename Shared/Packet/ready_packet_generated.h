// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_READYPACKET_FLATINGAMEPACKET_GAME_H_
#define FLATBUFFERS_GENERATED_READYPACKET_FLATINGAMEPACKET_GAME_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

#include "vehicle_information_generated.h"

namespace FlatInGamePacket {
namespace Game {

struct PlayerReadyPacket;
struct PlayerReadyPacketBuilder;

struct PlayerReadyPacket FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerReadyPacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_INIT_VEHICLE_INFORMATION = 6
  };
  int32_t uuid() const {
    return GetField<int32_t>(VT_UUID, 0);
  }
  const FlatInGamePacket::Game::VehicleInformation *init_vehicle_information() const {
    return GetPointer<const FlatInGamePacket::Game::VehicleInformation *>(VT_INIT_VEHICLE_INFORMATION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_UUID, 4) &&
           VerifyOffset(verifier, VT_INIT_VEHICLE_INFORMATION) &&
           verifier.VerifyTable(init_vehicle_information()) &&
           verifier.EndTable();
  }
};

struct PlayerReadyPacketBuilder {
  typedef PlayerReadyPacket Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_uuid(int32_t uuid) {
    fbb_.AddElement<int32_t>(PlayerReadyPacket::VT_UUID, uuid, 0);
  }
  void add_init_vehicle_information(::flatbuffers::Offset<FlatInGamePacket::Game::VehicleInformation> init_vehicle_information) {
    fbb_.AddOffset(PlayerReadyPacket::VT_INIT_VEHICLE_INFORMATION, init_vehicle_information);
  }
  explicit PlayerReadyPacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerReadyPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerReadyPacket>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerReadyPacket> CreatePlayerReadyPacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t uuid = 0,
    ::flatbuffers::Offset<FlatInGamePacket::Game::VehicleInformation> init_vehicle_information = 0) {
  PlayerReadyPacketBuilder builder_(_fbb);
  builder_.add_init_vehicle_information(init_vehicle_information);
  builder_.add_uuid(uuid);
  return builder_.Finish();
}

inline const FlatInGamePacket::Game::PlayerReadyPacket *GetPlayerReadyPacket(const void *buf) {
  return ::flatbuffers::GetRoot<FlatInGamePacket::Game::PlayerReadyPacket>(buf);
}

inline const FlatInGamePacket::Game::PlayerReadyPacket *GetSizePrefixedPlayerReadyPacket(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlatInGamePacket::Game::PlayerReadyPacket>(buf);
}

inline bool VerifyPlayerReadyPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatInGamePacket::Game::PlayerReadyPacket>(nullptr);
}

inline bool VerifySizePrefixedPlayerReadyPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatInGamePacket::Game::PlayerReadyPacket>(nullptr);
}

inline void FinishPlayerReadyPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatInGamePacket::Game::PlayerReadyPacket> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPlayerReadyPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatInGamePacket::Game::PlayerReadyPacket> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Game
}  // namespace FlatInGamePacket

#endif  // FLATBUFFERS_GENERATED_READYPACKET_FLATINGAMEPACKET_GAME_H_
